// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_ACTIONet_RCPPEXPORTS_H_GEN_
#define RCPP_ACTIONet_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace ACTIONet {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("ACTIONet", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("ACTIONet", "_ACTIONet_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in ACTIONet");
            }
        }
    }

    inline List run_ACTION_muV(const List& S, int k_min, int k_max, vec alpha, double lambda = 1, int AA_iters = 50, int Opt_iters = 0, int thread_no = 0) {
        typedef SEXP(*Ptr_run_ACTION_muV)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_run_ACTION_muV p_run_ACTION_muV = NULL;
        if (p_run_ACTION_muV == NULL) {
            validateSignature("List(*run_ACTION_muV)(const List&,int,int,vec,double,int,int,int)");
            p_run_ACTION_muV = (Ptr_run_ACTION_muV)R_GetCCallable("ACTIONet", "_ACTIONet_run_ACTION_muV");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_run_ACTION_muV(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(k_min)), Shield<SEXP>(Rcpp::wrap(k_max)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(lambda)), Shield<SEXP>(Rcpp::wrap(AA_iters)), Shield<SEXP>(Rcpp::wrap(Opt_iters)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline void set_seed(double seed) {
        typedef SEXP(*Ptr_set_seed)(SEXP);
        static Ptr_set_seed p_set_seed = NULL;
        if (p_set_seed == NULL) {
            validateSignature("void(*set_seed)(double)");
            p_set_seed = (Ptr_set_seed)R_GetCCallable("ACTIONet", "_ACTIONet_set_seed");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_set_seed(Shield<SEXP>(Rcpp::wrap(seed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline List IRLB_SVD(sp_mat& A, int dim, int iters = 1000, int seed = 0, int verbose = 1) {
        typedef SEXP(*Ptr_IRLB_SVD)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_IRLB_SVD p_IRLB_SVD = NULL;
        if (p_IRLB_SVD == NULL) {
            validateSignature("List(*IRLB_SVD)(sp_mat&,int,int,int,int)");
            p_IRLB_SVD = (Ptr_IRLB_SVD)R_GetCCallable("ACTIONet", "_ACTIONet_IRLB_SVD");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_IRLB_SVD(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(dim)), Shield<SEXP>(Rcpp::wrap(iters)), Shield<SEXP>(Rcpp::wrap(seed)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List IRLB_SVD_full(mat& A, int dim, int iters = 1000, int seed = 0, int verbose = 1) {
        typedef SEXP(*Ptr_IRLB_SVD_full)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_IRLB_SVD_full p_IRLB_SVD_full = NULL;
        if (p_IRLB_SVD_full == NULL) {
            validateSignature("List(*IRLB_SVD_full)(mat&,int,int,int,int)");
            p_IRLB_SVD_full = (Ptr_IRLB_SVD_full)R_GetCCallable("ACTIONet", "_ACTIONet_IRLB_SVD_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_IRLB_SVD_full(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(dim)), Shield<SEXP>(Rcpp::wrap(iters)), Shield<SEXP>(Rcpp::wrap(seed)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List FengSVD(sp_mat& A, int dim, int iters = 5, int seed = 0, int verbose = 1) {
        typedef SEXP(*Ptr_FengSVD)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_FengSVD p_FengSVD = NULL;
        if (p_FengSVD == NULL) {
            validateSignature("List(*FengSVD)(sp_mat&,int,int,int,int)");
            p_FengSVD = (Ptr_FengSVD)R_GetCCallable("ACTIONet", "_ACTIONet_FengSVD");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_FengSVD(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(dim)), Shield<SEXP>(Rcpp::wrap(iters)), Shield<SEXP>(Rcpp::wrap(seed)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List FengSVD_full(mat& A, int dim, int iters = 5, int seed = 0, int verbose = 1) {
        typedef SEXP(*Ptr_FengSVD_full)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_FengSVD_full p_FengSVD_full = NULL;
        if (p_FengSVD_full == NULL) {
            validateSignature("List(*FengSVD_full)(mat&,int,int,int,int)");
            p_FengSVD_full = (Ptr_FengSVD_full)R_GetCCallable("ACTIONet", "_ACTIONet_FengSVD_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_FengSVD_full(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(dim)), Shield<SEXP>(Rcpp::wrap(iters)), Shield<SEXP>(Rcpp::wrap(seed)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List HalkoSVD(sp_mat& A, int dim, int iters = 5, int seed = 0, int verbose = 1) {
        typedef SEXP(*Ptr_HalkoSVD)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_HalkoSVD p_HalkoSVD = NULL;
        if (p_HalkoSVD == NULL) {
            validateSignature("List(*HalkoSVD)(sp_mat&,int,int,int,int)");
            p_HalkoSVD = (Ptr_HalkoSVD)R_GetCCallable("ACTIONet", "_ACTIONet_HalkoSVD");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_HalkoSVD(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(dim)), Shield<SEXP>(Rcpp::wrap(iters)), Shield<SEXP>(Rcpp::wrap(seed)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List HalkoSVD_full(mat& A, int dim, int iters = 5, int seed = 0, int verbose = 1) {
        typedef SEXP(*Ptr_HalkoSVD_full)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_HalkoSVD_full p_HalkoSVD_full = NULL;
        if (p_HalkoSVD_full == NULL) {
            validateSignature("List(*HalkoSVD_full)(mat&,int,int,int,int)");
            p_HalkoSVD_full = (Ptr_HalkoSVD_full)R_GetCCallable("ACTIONet", "_ACTIONet_HalkoSVD_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_HalkoSVD_full(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(dim)), Shield<SEXP>(Rcpp::wrap(iters)), Shield<SEXP>(Rcpp::wrap(seed)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List reduce_kernel(sp_mat& S, int reduced_dim = 50, int iter = 5, int seed = 0, int SVD_algorithm = 0, bool prenormalize = false, int verbose = 1) {
        typedef SEXP(*Ptr_reduce_kernel)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_reduce_kernel p_reduce_kernel = NULL;
        if (p_reduce_kernel == NULL) {
            validateSignature("List(*reduce_kernel)(sp_mat&,int,int,int,int,bool,int)");
            p_reduce_kernel = (Ptr_reduce_kernel)R_GetCCallable("ACTIONet", "_ACTIONet_reduce_kernel");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_reduce_kernel(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(reduced_dim)), Shield<SEXP>(Rcpp::wrap(iter)), Shield<SEXP>(Rcpp::wrap(seed)), Shield<SEXP>(Rcpp::wrap(SVD_algorithm)), Shield<SEXP>(Rcpp::wrap(prenormalize)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List reduce_kernel_full(mat& S, int reduced_dim = 50, int iter = 5, int seed = 0, int SVD_algorithm = 0, bool prenormalize = false, int verbose = 1) {
        typedef SEXP(*Ptr_reduce_kernel_full)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_reduce_kernel_full p_reduce_kernel_full = NULL;
        if (p_reduce_kernel_full == NULL) {
            validateSignature("List(*reduce_kernel_full)(mat&,int,int,int,int,bool,int)");
            p_reduce_kernel_full = (Ptr_reduce_kernel_full)R_GetCCallable("ACTIONet", "_ACTIONet_reduce_kernel_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_reduce_kernel_full(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(reduced_dim)), Shield<SEXP>(Rcpp::wrap(iter)), Shield<SEXP>(Rcpp::wrap(seed)), Shield<SEXP>(Rcpp::wrap(SVD_algorithm)), Shield<SEXP>(Rcpp::wrap(prenormalize)), Shield<SEXP>(Rcpp::wrap(verbose)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline mat run_simplex_regression(mat& A, mat& B, bool computeXtX = false) {
        typedef SEXP(*Ptr_run_simplex_regression)(SEXP,SEXP,SEXP);
        static Ptr_run_simplex_regression p_run_simplex_regression = NULL;
        if (p_run_simplex_regression == NULL) {
            validateSignature("mat(*run_simplex_regression)(mat&,mat&,bool)");
            p_run_simplex_regression = (Ptr_run_simplex_regression)R_GetCCallable("ACTIONet", "_ACTIONet_run_simplex_regression");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_run_simplex_regression(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(B)), Shield<SEXP>(Rcpp::wrap(computeXtX)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline mat run_simplex_regression_FW(mat& A, mat& B, int max_iter = -1, double min_diff = 0.01) {
        typedef SEXP(*Ptr_run_simplex_regression_FW)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_run_simplex_regression_FW p_run_simplex_regression_FW = NULL;
        if (p_run_simplex_regression_FW == NULL) {
            validateSignature("mat(*run_simplex_regression_FW)(mat&,mat&,int,double)");
            p_run_simplex_regression_FW = (Ptr_run_simplex_regression_FW)R_GetCCallable("ACTIONet", "_ACTIONet_run_simplex_regression_FW");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_run_simplex_regression_FW(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(B)), Shield<SEXP>(Rcpp::wrap(max_iter)), Shield<SEXP>(Rcpp::wrap(min_diff)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline List run_SPA(mat& A, int k) {
        typedef SEXP(*Ptr_run_SPA)(SEXP,SEXP);
        static Ptr_run_SPA p_run_SPA = NULL;
        if (p_run_SPA == NULL) {
            validateSignature("List(*run_SPA)(mat&,int)");
            p_run_SPA = (Ptr_run_SPA)R_GetCCallable("ACTIONet", "_ACTIONet_run_SPA");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_run_SPA(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(k)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List run_SPA_rows_sparse(sp_mat& A, int k) {
        typedef SEXP(*Ptr_run_SPA_rows_sparse)(SEXP,SEXP);
        static Ptr_run_SPA_rows_sparse p_run_SPA_rows_sparse = NULL;
        if (p_run_SPA_rows_sparse == NULL) {
            validateSignature("List(*run_SPA_rows_sparse)(sp_mat&,int)");
            p_run_SPA_rows_sparse = (Ptr_run_SPA_rows_sparse)R_GetCCallable("ACTIONet", "_ACTIONet_run_SPA_rows_sparse");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_run_SPA_rows_sparse(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(k)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List run_ACTION(mat& S_r, int k_min = 2, int k_max = 30, int thread_no = 0, int max_it = 100, double min_delta = 1e-6, int normalization = 1) {
        typedef SEXP(*Ptr_run_ACTION)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_run_ACTION p_run_ACTION = NULL;
        if (p_run_ACTION == NULL) {
            validateSignature("List(*run_ACTION)(mat&,int,int,int,int,double,int)");
            p_run_ACTION = (Ptr_run_ACTION)R_GetCCallable("ACTIONet", "_ACTIONet_run_ACTION");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_run_ACTION(Shield<SEXP>(Rcpp::wrap(S_r)), Shield<SEXP>(Rcpp::wrap(k_min)), Shield<SEXP>(Rcpp::wrap(k_max)), Shield<SEXP>(Rcpp::wrap(thread_no)), Shield<SEXP>(Rcpp::wrap(max_it)), Shield<SEXP>(Rcpp::wrap(min_delta)), Shield<SEXP>(Rcpp::wrap(normalization)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List run_ACTION_plus(mat& S_r, int k_min = 2, int k_max = 30, int max_it = 100, double min_delta = 1e-6, int max_trial = 3) {
        typedef SEXP(*Ptr_run_ACTION_plus)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_run_ACTION_plus p_run_ACTION_plus = NULL;
        if (p_run_ACTION_plus == NULL) {
            validateSignature("List(*run_ACTION_plus)(mat&,int,int,int,double,int)");
            p_run_ACTION_plus = (Ptr_run_ACTION_plus)R_GetCCallable("ACTIONet", "_ACTIONet_run_ACTION_plus");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_run_ACTION_plus(Shield<SEXP>(Rcpp::wrap(S_r)), Shield<SEXP>(Rcpp::wrap(k_min)), Shield<SEXP>(Rcpp::wrap(k_max)), Shield<SEXP>(Rcpp::wrap(max_it)), Shield<SEXP>(Rcpp::wrap(min_delta)), Shield<SEXP>(Rcpp::wrap(max_trial)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List run_AA(mat& A, mat& W0, int max_it = 100, double min_delta = 1e-6) {
        typedef SEXP(*Ptr_run_AA)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_run_AA p_run_AA = NULL;
        if (p_run_AA == NULL) {
            validateSignature("List(*run_AA)(mat&,mat&,int,double)");
            p_run_AA = (Ptr_run_AA)R_GetCCallable("ACTIONet", "_ACTIONet_run_AA");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_run_AA(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(W0)), Shield<SEXP>(Rcpp::wrap(max_it)), Shield<SEXP>(Rcpp::wrap(min_delta)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List run_online_ACTION(mat& S_r, field<uvec> samples, int k_min = 2, int k_max = 30, int thread_no = 0) {
        typedef SEXP(*Ptr_run_online_ACTION)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_run_online_ACTION p_run_online_ACTION = NULL;
        if (p_run_online_ACTION == NULL) {
            validateSignature("List(*run_online_ACTION)(mat&,field<uvec>,int,int,int)");
            p_run_online_ACTION = (Ptr_run_online_ACTION)R_GetCCallable("ACTIONet", "_ACTIONet_run_online_ACTION");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_run_online_ACTION(Shield<SEXP>(Rcpp::wrap(S_r)), Shield<SEXP>(Rcpp::wrap(samples)), Shield<SEXP>(Rcpp::wrap(k_min)), Shield<SEXP>(Rcpp::wrap(k_max)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List run_weighted_ACTION(mat& S_r, vec w, int k_min = 2, int k_max = 30, int thread_no = 0, int max_it = 50, double min_delta = 1e-16) {
        typedef SEXP(*Ptr_run_weighted_ACTION)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_run_weighted_ACTION p_run_weighted_ACTION = NULL;
        if (p_run_weighted_ACTION == NULL) {
            validateSignature("List(*run_weighted_ACTION)(mat&,vec,int,int,int,int,double)");
            p_run_weighted_ACTION = (Ptr_run_weighted_ACTION)R_GetCCallable("ACTIONet", "_ACTIONet_run_weighted_ACTION");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_run_weighted_ACTION(Shield<SEXP>(Rcpp::wrap(S_r)), Shield<SEXP>(Rcpp::wrap(w)), Shield<SEXP>(Rcpp::wrap(k_min)), Shield<SEXP>(Rcpp::wrap(k_max)), Shield<SEXP>(Rcpp::wrap(thread_no)), Shield<SEXP>(Rcpp::wrap(max_it)), Shield<SEXP>(Rcpp::wrap(min_delta)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List prune_archetypes(const List& C_trace, const List& H_trace, double min_specificity_z_threshold = -3, int min_cells = 3) {
        typedef SEXP(*Ptr_prune_archetypes)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_prune_archetypes p_prune_archetypes = NULL;
        if (p_prune_archetypes == NULL) {
            validateSignature("List(*prune_archetypes)(const List&,const List&,double,int)");
            p_prune_archetypes = (Ptr_prune_archetypes)R_GetCCallable("ACTIONet", "_ACTIONet_prune_archetypes");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_prune_archetypes(Shield<SEXP>(Rcpp::wrap(C_trace)), Shield<SEXP>(Rcpp::wrap(H_trace)), Shield<SEXP>(Rcpp::wrap(min_specificity_z_threshold)), Shield<SEXP>(Rcpp::wrap(min_cells)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List unify_archetypes(mat& S_r, mat& C_stacked, mat& H_stacked, double backbone_density = 0.5, double resolution = 1.0, int min_cluster_size = 3, int thread_no = 0, int normalization = 0) {
        typedef SEXP(*Ptr_unify_archetypes)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_unify_archetypes p_unify_archetypes = NULL;
        if (p_unify_archetypes == NULL) {
            validateSignature("List(*unify_archetypes)(mat&,mat&,mat&,double,double,int,int,int)");
            p_unify_archetypes = (Ptr_unify_archetypes)R_GetCCallable("ACTIONet", "_ACTIONet_unify_archetypes");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_unify_archetypes(Shield<SEXP>(Rcpp::wrap(S_r)), Shield<SEXP>(Rcpp::wrap(C_stacked)), Shield<SEXP>(Rcpp::wrap(H_stacked)), Shield<SEXP>(Rcpp::wrap(backbone_density)), Shield<SEXP>(Rcpp::wrap(resolution)), Shield<SEXP>(Rcpp::wrap(min_cluster_size)), Shield<SEXP>(Rcpp::wrap(thread_no)), Shield<SEXP>(Rcpp::wrap(normalization)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline sp_mat buildNetwork(mat H, string algorithm = "k*nn", string distance_metric = "jsd", double density = 1.0, int thread_no = 0, bool mutual_edges_only = true, int k = 10, int ef_construction = 200, int ef = 200) {
        typedef SEXP(*Ptr_buildNetwork)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_buildNetwork p_buildNetwork = NULL;
        if (p_buildNetwork == NULL) {
            validateSignature("sp_mat(*buildNetwork)(mat,string,string,double,int,bool,int,int,int)");
            p_buildNetwork = (Ptr_buildNetwork)R_GetCCallable("ACTIONet", "_ACTIONet_buildNetwork");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_buildNetwork(Shield<SEXP>(Rcpp::wrap(H)), Shield<SEXP>(Rcpp::wrap(algorithm)), Shield<SEXP>(Rcpp::wrap(distance_metric)), Shield<SEXP>(Rcpp::wrap(density)), Shield<SEXP>(Rcpp::wrap(thread_no)), Shield<SEXP>(Rcpp::wrap(mutual_edges_only)), Shield<SEXP>(Rcpp::wrap(k)), Shield<SEXP>(Rcpp::wrap(ef_construction)), Shield<SEXP>(Rcpp::wrap(ef)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<sp_mat >(rcpp_result_gen);
    }

    inline sp_mat build_knn(mat H, string distance_metric = "jsd", double k = 10, int thread_no = 0, bool mutual_edges_only = true) {
        typedef SEXP(*Ptr_build_knn)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_build_knn p_build_knn = NULL;
        if (p_build_knn == NULL) {
            validateSignature("sp_mat(*build_knn)(mat,string,double,int,bool)");
            p_build_knn = (Ptr_build_knn)R_GetCCallable("ACTIONet", "_ACTIONet_build_knn");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_build_knn(Shield<SEXP>(Rcpp::wrap(H)), Shield<SEXP>(Rcpp::wrap(distance_metric)), Shield<SEXP>(Rcpp::wrap(k)), Shield<SEXP>(Rcpp::wrap(thread_no)), Shield<SEXP>(Rcpp::wrap(mutual_edges_only)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<sp_mat >(rcpp_result_gen);
    }

    inline List layoutNetwork(sp_mat& G, mat& initial_position, const std::string& method = "umap", bool presmooth_network = false, double min_dist = 1, double spread = 1, double gamma = 1.0, unsigned int n_epochs = 500, int thread_no = 0, int seed = 0, double learning_rate = 1.0, int sim2dist = 2) {
        typedef SEXP(*Ptr_layoutNetwork)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_layoutNetwork p_layoutNetwork = NULL;
        if (p_layoutNetwork == NULL) {
            validateSignature("List(*layoutNetwork)(sp_mat&,mat&,const std::string&,bool,double,double,double,unsigned int,int,int,double,int)");
            p_layoutNetwork = (Ptr_layoutNetwork)R_GetCCallable("ACTIONet", "_ACTIONet_layoutNetwork");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_layoutNetwork(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(initial_position)), Shield<SEXP>(Rcpp::wrap(method)), Shield<SEXP>(Rcpp::wrap(presmooth_network)), Shield<SEXP>(Rcpp::wrap(min_dist)), Shield<SEXP>(Rcpp::wrap(spread)), Shield<SEXP>(Rcpp::wrap(gamma)), Shield<SEXP>(Rcpp::wrap(n_epochs)), Shield<SEXP>(Rcpp::wrap(thread_no)), Shield<SEXP>(Rcpp::wrap(seed)), Shield<SEXP>(Rcpp::wrap(learning_rate)), Shield<SEXP>(Rcpp::wrap(sim2dist)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline vector<string> encode_ids(vector<string> ids, string pass) {
        typedef SEXP(*Ptr_encode_ids)(SEXP,SEXP);
        static Ptr_encode_ids p_encode_ids = NULL;
        if (p_encode_ids == NULL) {
            validateSignature("vector<string>(*encode_ids)(vector<string>,string)");
            p_encode_ids = (Ptr_encode_ids)R_GetCCallable("ACTIONet", "_ACTIONet_encode_ids");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_encode_ids(Shield<SEXP>(Rcpp::wrap(ids)), Shield<SEXP>(Rcpp::wrap(pass)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<vector<string> >(rcpp_result_gen);
    }

    inline vector<string> decode_ids(vector<string> encoded_ids, string pass) {
        typedef SEXP(*Ptr_decode_ids)(SEXP,SEXP);
        static Ptr_decode_ids p_decode_ids = NULL;
        if (p_decode_ids == NULL) {
            validateSignature("vector<string>(*decode_ids)(vector<string>,string)");
            p_decode_ids = (Ptr_decode_ids)R_GetCCallable("ACTIONet", "_ACTIONet_decode_ids");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_decode_ids(Shield<SEXP>(Rcpp::wrap(encoded_ids)), Shield<SEXP>(Rcpp::wrap(pass)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<vector<string> >(rcpp_result_gen);
    }

    inline mat compute_grouped_rowsums(sp_mat& S, arma::Col<unsigned long long> sample_assignments) {
        typedef SEXP(*Ptr_compute_grouped_rowsums)(SEXP,SEXP);
        static Ptr_compute_grouped_rowsums p_compute_grouped_rowsums = NULL;
        if (p_compute_grouped_rowsums == NULL) {
            validateSignature("mat(*compute_grouped_rowsums)(sp_mat&,arma::Col<unsigned long long>)");
            p_compute_grouped_rowsums = (Ptr_compute_grouped_rowsums)R_GetCCallable("ACTIONet", "_ACTIONet_compute_grouped_rowsums");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_grouped_rowsums(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(sample_assignments)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline mat compute_grouped_rowsums_full(mat& S, arma::Col<unsigned long long> sample_assignments) {
        typedef SEXP(*Ptr_compute_grouped_rowsums_full)(SEXP,SEXP);
        static Ptr_compute_grouped_rowsums_full p_compute_grouped_rowsums_full = NULL;
        if (p_compute_grouped_rowsums_full == NULL) {
            validateSignature("mat(*compute_grouped_rowsums_full)(mat&,arma::Col<unsigned long long>)");
            p_compute_grouped_rowsums_full = (Ptr_compute_grouped_rowsums_full)R_GetCCallable("ACTIONet", "_ACTIONet_compute_grouped_rowsums_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_grouped_rowsums_full(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(sample_assignments)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline mat compute_grouped_rowmeans(sp_mat& S, arma::Col<unsigned long long> sample_assignments) {
        typedef SEXP(*Ptr_compute_grouped_rowmeans)(SEXP,SEXP);
        static Ptr_compute_grouped_rowmeans p_compute_grouped_rowmeans = NULL;
        if (p_compute_grouped_rowmeans == NULL) {
            validateSignature("mat(*compute_grouped_rowmeans)(sp_mat&,arma::Col<unsigned long long>)");
            p_compute_grouped_rowmeans = (Ptr_compute_grouped_rowmeans)R_GetCCallable("ACTIONet", "_ACTIONet_compute_grouped_rowmeans");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_grouped_rowmeans(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(sample_assignments)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline mat compute_grouped_rowmeans_full(mat& S, arma::Col<unsigned long long> sample_assignments) {
        typedef SEXP(*Ptr_compute_grouped_rowmeans_full)(SEXP,SEXP);
        static Ptr_compute_grouped_rowmeans_full p_compute_grouped_rowmeans_full = NULL;
        if (p_compute_grouped_rowmeans_full == NULL) {
            validateSignature("mat(*compute_grouped_rowmeans_full)(mat&,arma::Col<unsigned long long>)");
            p_compute_grouped_rowmeans_full = (Ptr_compute_grouped_rowmeans_full)R_GetCCallable("ACTIONet", "_ACTIONet_compute_grouped_rowmeans_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_grouped_rowmeans_full(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(sample_assignments)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline mat compute_grouped_rowvars(sp_mat& S, arma::Col<unsigned long long> sample_assignments) {
        typedef SEXP(*Ptr_compute_grouped_rowvars)(SEXP,SEXP);
        static Ptr_compute_grouped_rowvars p_compute_grouped_rowvars = NULL;
        if (p_compute_grouped_rowvars == NULL) {
            validateSignature("mat(*compute_grouped_rowvars)(sp_mat&,arma::Col<unsigned long long>)");
            p_compute_grouped_rowvars = (Ptr_compute_grouped_rowvars)R_GetCCallable("ACTIONet", "_ACTIONet_compute_grouped_rowvars");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_grouped_rowvars(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(sample_assignments)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline mat compute_grouped_rowvars_full(mat& S, arma::Col<unsigned long long> sample_assignments) {
        typedef SEXP(*Ptr_compute_grouped_rowvars_full)(SEXP,SEXP);
        static Ptr_compute_grouped_rowvars_full p_compute_grouped_rowvars_full = NULL;
        if (p_compute_grouped_rowvars_full == NULL) {
            validateSignature("mat(*compute_grouped_rowvars_full)(mat&,arma::Col<unsigned long long>)");
            p_compute_grouped_rowvars_full = (Ptr_compute_grouped_rowvars_full)R_GetCCallable("ACTIONet", "_ACTIONet_compute_grouped_rowvars_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_grouped_rowvars_full(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(sample_assignments)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline mat compute_pseudo_bulk_per_archetype(sp_mat& S, mat& H) {
        typedef SEXP(*Ptr_compute_pseudo_bulk_per_archetype)(SEXP,SEXP);
        static Ptr_compute_pseudo_bulk_per_archetype p_compute_pseudo_bulk_per_archetype = NULL;
        if (p_compute_pseudo_bulk_per_archetype == NULL) {
            validateSignature("mat(*compute_pseudo_bulk_per_archetype)(sp_mat&,mat&)");
            p_compute_pseudo_bulk_per_archetype = (Ptr_compute_pseudo_bulk_per_archetype)R_GetCCallable("ACTIONet", "_ACTIONet_compute_pseudo_bulk_per_archetype");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_pseudo_bulk_per_archetype(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(H)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline mat compute_pseudo_bulk_per_archetype_full(mat& S, mat& H) {
        typedef SEXP(*Ptr_compute_pseudo_bulk_per_archetype_full)(SEXP,SEXP);
        static Ptr_compute_pseudo_bulk_per_archetype_full p_compute_pseudo_bulk_per_archetype_full = NULL;
        if (p_compute_pseudo_bulk_per_archetype_full == NULL) {
            validateSignature("mat(*compute_pseudo_bulk_per_archetype_full)(mat&,mat&)");
            p_compute_pseudo_bulk_per_archetype_full = (Ptr_compute_pseudo_bulk_per_archetype_full)R_GetCCallable("ACTIONet", "_ACTIONet_compute_pseudo_bulk_per_archetype_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_pseudo_bulk_per_archetype_full(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(H)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline field<mat> compute_pseudo_bulk_per_archetype_and_ind(sp_mat& S, mat& H, arma::Col<unsigned long long> individuals) {
        typedef SEXP(*Ptr_compute_pseudo_bulk_per_archetype_and_ind)(SEXP,SEXP,SEXP);
        static Ptr_compute_pseudo_bulk_per_archetype_and_ind p_compute_pseudo_bulk_per_archetype_and_ind = NULL;
        if (p_compute_pseudo_bulk_per_archetype_and_ind == NULL) {
            validateSignature("field<mat>(*compute_pseudo_bulk_per_archetype_and_ind)(sp_mat&,mat&,arma::Col<unsigned long long>)");
            p_compute_pseudo_bulk_per_archetype_and_ind = (Ptr_compute_pseudo_bulk_per_archetype_and_ind)R_GetCCallable("ACTIONet", "_ACTIONet_compute_pseudo_bulk_per_archetype_and_ind");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_pseudo_bulk_per_archetype_and_ind(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(H)), Shield<SEXP>(Rcpp::wrap(individuals)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<field<mat> >(rcpp_result_gen);
    }

    inline field<mat> compute_pseudo_bulk_per_archetype_and_ind_full(mat& S, mat& H, arma::Col<unsigned long long> individuals) {
        typedef SEXP(*Ptr_compute_pseudo_bulk_per_archetype_and_ind_full)(SEXP,SEXP,SEXP);
        static Ptr_compute_pseudo_bulk_per_archetype_and_ind_full p_compute_pseudo_bulk_per_archetype_and_ind_full = NULL;
        if (p_compute_pseudo_bulk_per_archetype_and_ind_full == NULL) {
            validateSignature("field<mat>(*compute_pseudo_bulk_per_archetype_and_ind_full)(mat&,mat&,arma::Col<unsigned long long>)");
            p_compute_pseudo_bulk_per_archetype_and_ind_full = (Ptr_compute_pseudo_bulk_per_archetype_and_ind_full)R_GetCCallable("ACTIONet", "_ACTIONet_compute_pseudo_bulk_per_archetype_and_ind_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_pseudo_bulk_per_archetype_and_ind_full(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(H)), Shield<SEXP>(Rcpp::wrap(individuals)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<field<mat> >(rcpp_result_gen);
    }

    inline sp_mat renormalize_input_matrix(sp_mat& S, arma::Col<unsigned long long> sample_assignments) {
        typedef SEXP(*Ptr_renormalize_input_matrix)(SEXP,SEXP);
        static Ptr_renormalize_input_matrix p_renormalize_input_matrix = NULL;
        if (p_renormalize_input_matrix == NULL) {
            validateSignature("sp_mat(*renormalize_input_matrix)(sp_mat&,arma::Col<unsigned long long>)");
            p_renormalize_input_matrix = (Ptr_renormalize_input_matrix)R_GetCCallable("ACTIONet", "_ACTIONet_renormalize_input_matrix");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_renormalize_input_matrix(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(sample_assignments)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<sp_mat >(rcpp_result_gen);
    }

    inline mat renormalize_input_matrix_full(mat& S, arma::Col<unsigned long long> sample_assignments) {
        typedef SEXP(*Ptr_renormalize_input_matrix_full)(SEXP,SEXP);
        static Ptr_renormalize_input_matrix_full p_renormalize_input_matrix_full = NULL;
        if (p_renormalize_input_matrix_full == NULL) {
            validateSignature("mat(*renormalize_input_matrix_full)(mat&,arma::Col<unsigned long long>)");
            p_renormalize_input_matrix_full = (Ptr_renormalize_input_matrix_full)R_GetCCallable("ACTIONet", "_ACTIONet_renormalize_input_matrix_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_renormalize_input_matrix_full(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(sample_assignments)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline List compute_archetype_feature_specificity_bin(sp_mat& S, mat& H, int thread_no = 0) {
        typedef SEXP(*Ptr_compute_archetype_feature_specificity_bin)(SEXP,SEXP,SEXP);
        static Ptr_compute_archetype_feature_specificity_bin p_compute_archetype_feature_specificity_bin = NULL;
        if (p_compute_archetype_feature_specificity_bin == NULL) {
            validateSignature("List(*compute_archetype_feature_specificity_bin)(sp_mat&,mat&,int)");
            p_compute_archetype_feature_specificity_bin = (Ptr_compute_archetype_feature_specificity_bin)R_GetCCallable("ACTIONet", "_ACTIONet_compute_archetype_feature_specificity_bin");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_archetype_feature_specificity_bin(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(H)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List compute_archetype_feature_specificity(sp_mat& S, mat& H, int thread_no = 0) {
        typedef SEXP(*Ptr_compute_archetype_feature_specificity)(SEXP,SEXP,SEXP);
        static Ptr_compute_archetype_feature_specificity p_compute_archetype_feature_specificity = NULL;
        if (p_compute_archetype_feature_specificity == NULL) {
            validateSignature("List(*compute_archetype_feature_specificity)(sp_mat&,mat&,int)");
            p_compute_archetype_feature_specificity = (Ptr_compute_archetype_feature_specificity)R_GetCCallable("ACTIONet", "_ACTIONet_compute_archetype_feature_specificity");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_archetype_feature_specificity(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(H)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List compute_archetype_feature_specificity_full(mat& S, mat& H, int thread_no = 0) {
        typedef SEXP(*Ptr_compute_archetype_feature_specificity_full)(SEXP,SEXP,SEXP);
        static Ptr_compute_archetype_feature_specificity_full p_compute_archetype_feature_specificity_full = NULL;
        if (p_compute_archetype_feature_specificity_full == NULL) {
            validateSignature("List(*compute_archetype_feature_specificity_full)(mat&,mat&,int)");
            p_compute_archetype_feature_specificity_full = (Ptr_compute_archetype_feature_specificity_full)R_GetCCallable("ACTIONet", "_ACTIONet_compute_archetype_feature_specificity_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_archetype_feature_specificity_full(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(H)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List compute_cluster_feature_specificity(sp_mat& S, uvec sample_assignments, int thread_no = 0) {
        typedef SEXP(*Ptr_compute_cluster_feature_specificity)(SEXP,SEXP,SEXP);
        static Ptr_compute_cluster_feature_specificity p_compute_cluster_feature_specificity = NULL;
        if (p_compute_cluster_feature_specificity == NULL) {
            validateSignature("List(*compute_cluster_feature_specificity)(sp_mat&,uvec,int)");
            p_compute_cluster_feature_specificity = (Ptr_compute_cluster_feature_specificity)R_GetCCallable("ACTIONet", "_ACTIONet_compute_cluster_feature_specificity");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_cluster_feature_specificity(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(sample_assignments)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List compute_cluster_feature_specificity_full(mat& S, uvec sample_assignments, int thread_no = 0) {
        typedef SEXP(*Ptr_compute_cluster_feature_specificity_full)(SEXP,SEXP,SEXP);
        static Ptr_compute_cluster_feature_specificity_full p_compute_cluster_feature_specificity_full = NULL;
        if (p_compute_cluster_feature_specificity_full == NULL) {
            validateSignature("List(*compute_cluster_feature_specificity_full)(mat&,uvec,int)");
            p_compute_cluster_feature_specificity_full = (Ptr_compute_cluster_feature_specificity_full)R_GetCCallable("ACTIONet", "_ACTIONet_compute_cluster_feature_specificity_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_cluster_feature_specificity_full(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(sample_assignments)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline uvec compute_core_number(sp_mat& G) {
        typedef SEXP(*Ptr_compute_core_number)(SEXP);
        static Ptr_compute_core_number p_compute_core_number = NULL;
        if (p_compute_core_number == NULL) {
            validateSignature("uvec(*compute_core_number)(sp_mat&)");
            p_compute_core_number = (Ptr_compute_core_number)R_GetCCallable("ACTIONet", "_ACTIONet_compute_core_number");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_core_number(Shield<SEXP>(Rcpp::wrap(G)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<uvec >(rcpp_result_gen);
    }

    inline vec compute_archetype_core_centrality(sp_mat& G, uvec sample_assignments) {
        typedef SEXP(*Ptr_compute_archetype_core_centrality)(SEXP,SEXP);
        static Ptr_compute_archetype_core_centrality p_compute_archetype_core_centrality = NULL;
        if (p_compute_archetype_core_centrality == NULL) {
            validateSignature("vec(*compute_archetype_core_centrality)(sp_mat&,uvec)");
            p_compute_archetype_core_centrality = (Ptr_compute_archetype_core_centrality)R_GetCCallable("ACTIONet", "_ACTIONet_compute_archetype_core_centrality");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_archetype_core_centrality(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(sample_assignments)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<vec >(rcpp_result_gen);
    }

    inline mat compute_network_diffusion_fast(sp_mat& G, sp_mat& X0, int thread_no = 0, double alpha = 0.85, int max_it = 3) {
        typedef SEXP(*Ptr_compute_network_diffusion_fast)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_compute_network_diffusion_fast p_compute_network_diffusion_fast = NULL;
        if (p_compute_network_diffusion_fast == NULL) {
            validateSignature("mat(*compute_network_diffusion_fast)(sp_mat&,sp_mat&,int,double,int)");
            p_compute_network_diffusion_fast = (Ptr_compute_network_diffusion_fast)R_GetCCallable("ACTIONet", "_ACTIONet_compute_network_diffusion_fast");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_network_diffusion_fast(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(X0)), Shield<SEXP>(Rcpp::wrap(thread_no)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(max_it)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline mat compute_network_diffusion_direct(sp_mat& G, sp_mat& X0, int thread_no = 0, double alpha = 0.85) {
        typedef SEXP(*Ptr_compute_network_diffusion_direct)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_compute_network_diffusion_direct p_compute_network_diffusion_direct = NULL;
        if (p_compute_network_diffusion_direct == NULL) {
            validateSignature("mat(*compute_network_diffusion_direct)(sp_mat&,sp_mat&,int,double)");
            p_compute_network_diffusion_direct = (Ptr_compute_network_diffusion_direct)R_GetCCallable("ACTIONet", "_ACTIONet_compute_network_diffusion_direct");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_network_diffusion_direct(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(X0)), Shield<SEXP>(Rcpp::wrap(thread_no)), Shield<SEXP>(Rcpp::wrap(alpha)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline List assess_enrichment(mat& scores, sp_mat& associations, int thread_no = 0) {
        typedef SEXP(*Ptr_assess_enrichment)(SEXP,SEXP,SEXP);
        static Ptr_assess_enrichment p_assess_enrichment = NULL;
        if (p_assess_enrichment == NULL) {
            validateSignature("List(*assess_enrichment)(mat&,sp_mat&,int)");
            p_assess_enrichment = (Ptr_assess_enrichment)R_GetCCallable("ACTIONet", "_ACTIONet_assess_enrichment");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_assess_enrichment(Shield<SEXP>(Rcpp::wrap(scores)), Shield<SEXP>(Rcpp::wrap(associations)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline vec NetDBSCAN(SEXP G, int minPts = 10, double eps = 0.5, double alpha = 0.85) {
        typedef SEXP(*Ptr_NetDBSCAN)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_NetDBSCAN p_NetDBSCAN = NULL;
        if (p_NetDBSCAN == NULL) {
            validateSignature("vec(*NetDBSCAN)(SEXP,int,double,double)");
            p_NetDBSCAN = (Ptr_NetDBSCAN)R_GetCCallable("ACTIONet", "_ACTIONet_NetDBSCAN");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_NetDBSCAN(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(minPts)), Shield<SEXP>(Rcpp::wrap(eps)), Shield<SEXP>(Rcpp::wrap(alpha)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<vec >(rcpp_result_gen);
    }

    inline List run_HDBSCAN(mat& X, int minPoints = 5, int minClusterSize = 5) {
        typedef SEXP(*Ptr_run_HDBSCAN)(SEXP,SEXP,SEXP);
        static Ptr_run_HDBSCAN p_run_HDBSCAN = NULL;
        if (p_run_HDBSCAN == NULL) {
            validateSignature("List(*run_HDBSCAN)(mat&,int,int)");
            p_run_HDBSCAN = (Ptr_run_HDBSCAN)R_GetCCallable("ACTIONet", "_ACTIONet_run_HDBSCAN");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_run_HDBSCAN(Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(minPoints)), Shield<SEXP>(Rcpp::wrap(minClusterSize)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline mat MWM_hungarian(mat& G) {
        typedef SEXP(*Ptr_MWM_hungarian)(SEXP);
        static Ptr_MWM_hungarian p_MWM_hungarian = NULL;
        if (p_MWM_hungarian == NULL) {
            validateSignature("mat(*MWM_hungarian)(mat&)");
            p_MWM_hungarian = (Ptr_MWM_hungarian)R_GetCCallable("ACTIONet", "_ACTIONet_MWM_hungarian");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_MWM_hungarian(Shield<SEXP>(Rcpp::wrap(G)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline vec signed_cluster(sp_mat A, double resolution_parameter = 1.0, Nullable<IntegerVector> initial_clusters_ = R_NilValue, int seed = 0) {
        typedef SEXP(*Ptr_signed_cluster)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_signed_cluster p_signed_cluster = NULL;
        if (p_signed_cluster == NULL) {
            validateSignature("vec(*signed_cluster)(sp_mat,double,Nullable<IntegerVector>,int)");
            p_signed_cluster = (Ptr_signed_cluster)R_GetCCallable("ACTIONet", "_ACTIONet_signed_cluster");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_signed_cluster(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(resolution_parameter)), Shield<SEXP>(Rcpp::wrap(initial_clusters_)), Shield<SEXP>(Rcpp::wrap(seed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<vec >(rcpp_result_gen);
    }

    inline mat unsigned_cluster_batch(sp_mat A, vec resolutions, Nullable<IntegerVector> initial_clusters_ = R_NilValue, int seed = 0) {
        typedef SEXP(*Ptr_unsigned_cluster_batch)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_unsigned_cluster_batch p_unsigned_cluster_batch = NULL;
        if (p_unsigned_cluster_batch == NULL) {
            validateSignature("mat(*unsigned_cluster_batch)(sp_mat,vec,Nullable<IntegerVector>,int)");
            p_unsigned_cluster_batch = (Ptr_unsigned_cluster_batch)R_GetCCallable("ACTIONet", "_ACTIONet_unsigned_cluster_batch");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_unsigned_cluster_batch(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(resolutions)), Shield<SEXP>(Rcpp::wrap(initial_clusters_)), Shield<SEXP>(Rcpp::wrap(seed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline vec unsigned_cluster(sp_mat A, double resolution_parameter = 1.0, Nullable<IntegerVector> initial_clusters_ = R_NilValue, int seed = 0) {
        typedef SEXP(*Ptr_unsigned_cluster)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_unsigned_cluster p_unsigned_cluster = NULL;
        if (p_unsigned_cluster == NULL) {
            validateSignature("vec(*unsigned_cluster)(sp_mat,double,Nullable<IntegerVector>,int)");
            p_unsigned_cluster = (Ptr_unsigned_cluster)R_GetCCallable("ACTIONet", "_ACTIONet_unsigned_cluster");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_unsigned_cluster(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(resolution_parameter)), Shield<SEXP>(Rcpp::wrap(initial_clusters_)), Shield<SEXP>(Rcpp::wrap(seed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<vec >(rcpp_result_gen);
    }

    inline mat sgd2_layout_weighted(sp_mat& G, mat S_r, int t_max = 30, double eps = .01, int seed = 0) {
        typedef SEXP(*Ptr_sgd2_layout_weighted)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sgd2_layout_weighted p_sgd2_layout_weighted = NULL;
        if (p_sgd2_layout_weighted == NULL) {
            validateSignature("mat(*sgd2_layout_weighted)(sp_mat&,mat,int,double,int)");
            p_sgd2_layout_weighted = (Ptr_sgd2_layout_weighted)R_GetCCallable("ACTIONet", "_ACTIONet_sgd2_layout_weighted");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sgd2_layout_weighted(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(S_r)), Shield<SEXP>(Rcpp::wrap(t_max)), Shield<SEXP>(Rcpp::wrap(eps)), Shield<SEXP>(Rcpp::wrap(seed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline mat sgd2_layout_weighted_convergent(sp_mat& G, mat S_r, int t_max = 30, double eps = 0.01, double delta = 0.03, int t_maxmax = 200, int seed = 0) {
        typedef SEXP(*Ptr_sgd2_layout_weighted_convergent)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sgd2_layout_weighted_convergent p_sgd2_layout_weighted_convergent = NULL;
        if (p_sgd2_layout_weighted_convergent == NULL) {
            validateSignature("mat(*sgd2_layout_weighted_convergent)(sp_mat&,mat,int,double,double,int,int)");
            p_sgd2_layout_weighted_convergent = (Ptr_sgd2_layout_weighted_convergent)R_GetCCallable("ACTIONet", "_ACTIONet_sgd2_layout_weighted_convergent");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sgd2_layout_weighted_convergent(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(S_r)), Shield<SEXP>(Rcpp::wrap(t_max)), Shield<SEXP>(Rcpp::wrap(eps)), Shield<SEXP>(Rcpp::wrap(delta)), Shield<SEXP>(Rcpp::wrap(t_maxmax)), Shield<SEXP>(Rcpp::wrap(seed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline mat sgd2_layout_sparse_weighted(sp_mat& G, mat S_r, int p = 200, int t_max = 30, double eps = 0.01, int seed = 0) {
        typedef SEXP(*Ptr_sgd2_layout_sparse_weighted)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_sgd2_layout_sparse_weighted p_sgd2_layout_sparse_weighted = NULL;
        if (p_sgd2_layout_sparse_weighted == NULL) {
            validateSignature("mat(*sgd2_layout_sparse_weighted)(sp_mat&,mat,int,int,double,int)");
            p_sgd2_layout_sparse_weighted = (Ptr_sgd2_layout_sparse_weighted)R_GetCCallable("ACTIONet", "_ACTIONet_sgd2_layout_sparse_weighted");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sgd2_layout_sparse_weighted(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(S_r)), Shield<SEXP>(Rcpp::wrap(p)), Shield<SEXP>(Rcpp::wrap(t_max)), Shield<SEXP>(Rcpp::wrap(eps)), Shield<SEXP>(Rcpp::wrap(seed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline List compute_AA_coreset(sp_mat& S, int m = 0) {
        typedef SEXP(*Ptr_compute_AA_coreset)(SEXP,SEXP);
        static Ptr_compute_AA_coreset p_compute_AA_coreset = NULL;
        if (p_compute_AA_coreset == NULL) {
            validateSignature("List(*compute_AA_coreset)(sp_mat&,int)");
            p_compute_AA_coreset = (Ptr_compute_AA_coreset)R_GetCCallable("ACTIONet", "_ACTIONet_compute_AA_coreset");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_AA_coreset(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(m)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List SVD2ACTIONred(sp_mat& S, mat u, vec d, mat v) {
        typedef SEXP(*Ptr_SVD2ACTIONred)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_SVD2ACTIONred p_SVD2ACTIONred = NULL;
        if (p_SVD2ACTIONred == NULL) {
            validateSignature("List(*SVD2ACTIONred)(sp_mat&,mat,vec,mat)");
            p_SVD2ACTIONred = (Ptr_SVD2ACTIONred)R_GetCCallable("ACTIONet", "_ACTIONet_SVD2ACTIONred");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_SVD2ACTIONred(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(u)), Shield<SEXP>(Rcpp::wrap(d)), Shield<SEXP>(Rcpp::wrap(v)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List SVD2ACTIONred_full(mat& S, mat u, vec d, mat v) {
        typedef SEXP(*Ptr_SVD2ACTIONred_full)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_SVD2ACTIONred_full p_SVD2ACTIONred_full = NULL;
        if (p_SVD2ACTIONred_full == NULL) {
            validateSignature("List(*SVD2ACTIONred_full)(mat&,mat,vec,mat)");
            p_SVD2ACTIONred_full = (Ptr_SVD2ACTIONred_full)R_GetCCallable("ACTIONet", "_ACTIONet_SVD2ACTIONred_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_SVD2ACTIONred_full(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(u)), Shield<SEXP>(Rcpp::wrap(d)), Shield<SEXP>(Rcpp::wrap(v)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List PCA2ACTIONred(sp_mat& S, mat x, vec sdev, mat rotation) {
        typedef SEXP(*Ptr_PCA2ACTIONred)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_PCA2ACTIONred p_PCA2ACTIONred = NULL;
        if (p_PCA2ACTIONred == NULL) {
            validateSignature("List(*PCA2ACTIONred)(sp_mat&,mat,vec,mat)");
            p_PCA2ACTIONred = (Ptr_PCA2ACTIONred)R_GetCCallable("ACTIONet", "_ACTIONet_PCA2ACTIONred");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_PCA2ACTIONred(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(sdev)), Shield<SEXP>(Rcpp::wrap(rotation)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List PCA2ACTIONred_full(mat& S, mat x, vec sdev, mat rotation) {
        typedef SEXP(*Ptr_PCA2ACTIONred_full)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_PCA2ACTIONred_full p_PCA2ACTIONred_full = NULL;
        if (p_PCA2ACTIONred_full == NULL) {
            validateSignature("List(*PCA2ACTIONred_full)(mat&,mat,vec,mat)");
            p_PCA2ACTIONred_full = (Ptr_PCA2ACTIONred_full)R_GetCCallable("ACTIONet", "_ACTIONet_PCA2ACTIONred_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_PCA2ACTIONred_full(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(sdev)), Shield<SEXP>(Rcpp::wrap(rotation)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List PCA2SVD(sp_mat& S, mat x, vec sdev, mat rotation) {
        typedef SEXP(*Ptr_PCA2SVD)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_PCA2SVD p_PCA2SVD = NULL;
        if (p_PCA2SVD == NULL) {
            validateSignature("List(*PCA2SVD)(sp_mat&,mat,vec,mat)");
            p_PCA2SVD = (Ptr_PCA2SVD)R_GetCCallable("ACTIONet", "_ACTIONet_PCA2SVD");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_PCA2SVD(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(sdev)), Shield<SEXP>(Rcpp::wrap(rotation)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List PCA2SVD_full(mat& S, mat x, vec sdev, mat rotation) {
        typedef SEXP(*Ptr_PCA2SVD_full)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_PCA2SVD_full p_PCA2SVD_full = NULL;
        if (p_PCA2SVD_full == NULL) {
            validateSignature("List(*PCA2SVD_full)(mat&,mat,vec,mat)");
            p_PCA2SVD_full = (Ptr_PCA2SVD_full)R_GetCCallable("ACTIONet", "_ACTIONet_PCA2SVD_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_PCA2SVD_full(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(sdev)), Shield<SEXP>(Rcpp::wrap(rotation)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List SVD2PCA(sp_mat& S, mat u, vec d, mat v) {
        typedef SEXP(*Ptr_SVD2PCA)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_SVD2PCA p_SVD2PCA = NULL;
        if (p_SVD2PCA == NULL) {
            validateSignature("List(*SVD2PCA)(sp_mat&,mat,vec,mat)");
            p_SVD2PCA = (Ptr_SVD2PCA)R_GetCCallable("ACTIONet", "_ACTIONet_SVD2PCA");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_SVD2PCA(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(u)), Shield<SEXP>(Rcpp::wrap(d)), Shield<SEXP>(Rcpp::wrap(v)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List SVD2PCA_full(mat& S, mat u, vec d, mat v) {
        typedef SEXP(*Ptr_SVD2PCA_full)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_SVD2PCA_full p_SVD2PCA_full = NULL;
        if (p_SVD2PCA_full == NULL) {
            validateSignature("List(*SVD2PCA_full)(mat&,mat,vec,mat)");
            p_SVD2PCA_full = (Ptr_SVD2PCA_full)R_GetCCallable("ACTIONet", "_ACTIONet_SVD2PCA_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_SVD2PCA_full(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(u)), Shield<SEXP>(Rcpp::wrap(d)), Shield<SEXP>(Rcpp::wrap(v)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List perturbedSVD(mat u, vec d, mat v, mat A, mat B) {
        typedef SEXP(*Ptr_perturbedSVD)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_perturbedSVD p_perturbedSVD = NULL;
        if (p_perturbedSVD == NULL) {
            validateSignature("List(*perturbedSVD)(mat,vec,mat,mat,mat)");
            p_perturbedSVD = (Ptr_perturbedSVD)R_GetCCallable("ACTIONet", "_ACTIONet_perturbedSVD");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_perturbedSVD(Shield<SEXP>(Rcpp::wrap(u)), Shield<SEXP>(Rcpp::wrap(d)), Shield<SEXP>(Rcpp::wrap(v)), Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(B)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline mat computeFullSim(mat& H, int thread_no = 0) {
        typedef SEXP(*Ptr_computeFullSim)(SEXP,SEXP);
        static Ptr_computeFullSim p_computeFullSim = NULL;
        if (p_computeFullSim == NULL) {
            validateSignature("mat(*computeFullSim)(mat&,int)");
            p_computeFullSim = (Ptr_computeFullSim)R_GetCCallable("ACTIONet", "_ACTIONet_computeFullSim");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_computeFullSim(Shield<SEXP>(Rcpp::wrap(H)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline List run_subACTION(mat& S_r, mat& W_parent, mat& H_parent, int kk, int k_min, int k_max, int thread_no, int max_it = 50, double min_delta = 1e-16) {
        typedef SEXP(*Ptr_run_subACTION)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_run_subACTION p_run_subACTION = NULL;
        if (p_run_subACTION == NULL) {
            validateSignature("List(*run_subACTION)(mat&,mat&,mat&,int,int,int,int,int,double)");
            p_run_subACTION = (Ptr_run_subACTION)R_GetCCallable("ACTIONet", "_ACTIONet_run_subACTION");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_run_subACTION(Shield<SEXP>(Rcpp::wrap(S_r)), Shield<SEXP>(Rcpp::wrap(W_parent)), Shield<SEXP>(Rcpp::wrap(H_parent)), Shield<SEXP>(Rcpp::wrap(kk)), Shield<SEXP>(Rcpp::wrap(k_min)), Shield<SEXP>(Rcpp::wrap(k_max)), Shield<SEXP>(Rcpp::wrap(thread_no)), Shield<SEXP>(Rcpp::wrap(max_it)), Shield<SEXP>(Rcpp::wrap(min_delta)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List deflate_reduction(mat& old_S_r, mat& old_V, mat& old_A, mat& old_B, vec& old_sigma, mat& A, mat& B) {
        typedef SEXP(*Ptr_deflate_reduction)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_deflate_reduction p_deflate_reduction = NULL;
        if (p_deflate_reduction == NULL) {
            validateSignature("List(*deflate_reduction)(mat&,mat&,mat&,mat&,vec&,mat&,mat&)");
            p_deflate_reduction = (Ptr_deflate_reduction)R_GetCCallable("ACTIONet", "_ACTIONet_deflate_reduction");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_deflate_reduction(Shield<SEXP>(Rcpp::wrap(old_S_r)), Shield<SEXP>(Rcpp::wrap(old_V)), Shield<SEXP>(Rcpp::wrap(old_A)), Shield<SEXP>(Rcpp::wrap(old_B)), Shield<SEXP>(Rcpp::wrap(old_sigma)), Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(B)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List orthogonalize_batch_effect(sp_mat& S, mat& old_S_r, mat& old_V, mat& old_A, mat& old_B, vec& old_sigma, mat& design) {
        typedef SEXP(*Ptr_orthogonalize_batch_effect)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_orthogonalize_batch_effect p_orthogonalize_batch_effect = NULL;
        if (p_orthogonalize_batch_effect == NULL) {
            validateSignature("List(*orthogonalize_batch_effect)(sp_mat&,mat&,mat&,mat&,mat&,vec&,mat&)");
            p_orthogonalize_batch_effect = (Ptr_orthogonalize_batch_effect)R_GetCCallable("ACTIONet", "_ACTIONet_orthogonalize_batch_effect");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_orthogonalize_batch_effect(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(old_S_r)), Shield<SEXP>(Rcpp::wrap(old_V)), Shield<SEXP>(Rcpp::wrap(old_A)), Shield<SEXP>(Rcpp::wrap(old_B)), Shield<SEXP>(Rcpp::wrap(old_sigma)), Shield<SEXP>(Rcpp::wrap(design)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List orthogonalize_batch_effect_full(mat& S, mat& old_S_r, mat& old_V, mat& old_A, mat& old_B, vec& old_sigma, mat& design) {
        typedef SEXP(*Ptr_orthogonalize_batch_effect_full)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_orthogonalize_batch_effect_full p_orthogonalize_batch_effect_full = NULL;
        if (p_orthogonalize_batch_effect_full == NULL) {
            validateSignature("List(*orthogonalize_batch_effect_full)(mat&,mat&,mat&,mat&,mat&,vec&,mat&)");
            p_orthogonalize_batch_effect_full = (Ptr_orthogonalize_batch_effect_full)R_GetCCallable("ACTIONet", "_ACTIONet_orthogonalize_batch_effect_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_orthogonalize_batch_effect_full(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(old_S_r)), Shield<SEXP>(Rcpp::wrap(old_V)), Shield<SEXP>(Rcpp::wrap(old_A)), Shield<SEXP>(Rcpp::wrap(old_B)), Shield<SEXP>(Rcpp::wrap(old_sigma)), Shield<SEXP>(Rcpp::wrap(design)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List orthogonalize_basal(sp_mat& S, mat& old_S_r, mat& old_V, mat& old_A, mat& old_B, vec& old_sigma, mat& basal) {
        typedef SEXP(*Ptr_orthogonalize_basal)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_orthogonalize_basal p_orthogonalize_basal = NULL;
        if (p_orthogonalize_basal == NULL) {
            validateSignature("List(*orthogonalize_basal)(sp_mat&,mat&,mat&,mat&,mat&,vec&,mat&)");
            p_orthogonalize_basal = (Ptr_orthogonalize_basal)R_GetCCallable("ACTIONet", "_ACTIONet_orthogonalize_basal");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_orthogonalize_basal(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(old_S_r)), Shield<SEXP>(Rcpp::wrap(old_V)), Shield<SEXP>(Rcpp::wrap(old_A)), Shield<SEXP>(Rcpp::wrap(old_B)), Shield<SEXP>(Rcpp::wrap(old_sigma)), Shield<SEXP>(Rcpp::wrap(basal)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List orthogonalize_basal_full(mat& S, mat& old_S_r, mat& old_V, mat& old_A, mat& old_B, vec& old_sigma, mat& basal) {
        typedef SEXP(*Ptr_orthogonalize_basal_full)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_orthogonalize_basal_full p_orthogonalize_basal_full = NULL;
        if (p_orthogonalize_basal_full == NULL) {
            validateSignature("List(*orthogonalize_basal_full)(mat&,mat&,mat&,mat&,mat&,vec&,mat&)");
            p_orthogonalize_basal_full = (Ptr_orthogonalize_basal_full)R_GetCCallable("ACTIONet", "_ACTIONet_orthogonalize_basal_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_orthogonalize_basal_full(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(old_S_r)), Shield<SEXP>(Rcpp::wrap(old_V)), Shield<SEXP>(Rcpp::wrap(old_A)), Shield<SEXP>(Rcpp::wrap(old_B)), Shield<SEXP>(Rcpp::wrap(old_sigma)), Shield<SEXP>(Rcpp::wrap(basal)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline umat MWM_rank1(vec u, vec v, double u_threshold = 0, double v_threshold = 0) {
        typedef SEXP(*Ptr_MWM_rank1)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_MWM_rank1 p_MWM_rank1 = NULL;
        if (p_MWM_rank1 == NULL) {
            validateSignature("umat(*MWM_rank1)(vec,vec,double,double)");
            p_MWM_rank1 = (Ptr_MWM_rank1)R_GetCCallable("ACTIONet", "_ACTIONet_MWM_rank1");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_MWM_rank1(Shield<SEXP>(Rcpp::wrap(u)), Shield<SEXP>(Rcpp::wrap(v)), Shield<SEXP>(Rcpp::wrap(u_threshold)), Shield<SEXP>(Rcpp::wrap(v_threshold)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<umat >(rcpp_result_gen);
    }

    inline mat NetEnh(mat A) {
        typedef SEXP(*Ptr_NetEnh)(SEXP);
        static Ptr_NetEnh p_NetEnh = NULL;
        if (p_NetEnh == NULL) {
            validateSignature("mat(*NetEnh)(mat)");
            p_NetEnh = (Ptr_NetEnh)R_GetCCallable("ACTIONet", "_ACTIONet_NetEnh");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_NetEnh(Shield<SEXP>(Rcpp::wrap(A)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline Rcpp::NumericVector run_LPA(sp_mat& G, vec labels, double lambda = 1, int iters = 3, double sig_threshold = 3, Nullable<IntegerVector> fixed_labels_ = R_NilValue, int thread_no = 0) {
        typedef SEXP(*Ptr_run_LPA)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_run_LPA p_run_LPA = NULL;
        if (p_run_LPA == NULL) {
            validateSignature("Rcpp::NumericVector(*run_LPA)(sp_mat&,vec,double,int,double,Nullable<IntegerVector>,int)");
            p_run_LPA = (Ptr_run_LPA)R_GetCCallable("ACTIONet", "_ACTIONet_run_LPA");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_run_LPA(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(labels)), Shield<SEXP>(Rcpp::wrap(lambda)), Shield<SEXP>(Rcpp::wrap(iters)), Shield<SEXP>(Rcpp::wrap(sig_threshold)), Shield<SEXP>(Rcpp::wrap(fixed_labels_)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::NumericVector >(rcpp_result_gen);
    }

    inline List run_AA_with_batch_correction(mat& Z, mat& W0, vec batch, int max_it = 100, int max_correction_rounds = 10, double lambda = 1, double min_delta = 1e-6) {
        typedef SEXP(*Ptr_run_AA_with_batch_correction)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_run_AA_with_batch_correction p_run_AA_with_batch_correction = NULL;
        if (p_run_AA_with_batch_correction == NULL) {
            validateSignature("List(*run_AA_with_batch_correction)(mat&,mat&,vec,int,int,double,double)");
            p_run_AA_with_batch_correction = (Ptr_run_AA_with_batch_correction)R_GetCCallable("ACTIONet", "_ACTIONet_run_AA_with_batch_correction");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_run_AA_with_batch_correction(Shield<SEXP>(Rcpp::wrap(Z)), Shield<SEXP>(Rcpp::wrap(W0)), Shield<SEXP>(Rcpp::wrap(batch)), Shield<SEXP>(Rcpp::wrap(max_it)), Shield<SEXP>(Rcpp::wrap(max_correction_rounds)), Shield<SEXP>(Rcpp::wrap(lambda)), Shield<SEXP>(Rcpp::wrap(min_delta)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List run_ACTION_with_batch_correction(mat& S_r, vec batch, int k_min, int k_max, int thread_no, int max_it = 100, int max_correction_rounds = 10, double lambda = 1, double min_delta = 1e-6) {
        typedef SEXP(*Ptr_run_ACTION_with_batch_correction)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_run_ACTION_with_batch_correction p_run_ACTION_with_batch_correction = NULL;
        if (p_run_ACTION_with_batch_correction == NULL) {
            validateSignature("List(*run_ACTION_with_batch_correction)(mat&,vec,int,int,int,int,int,double,double)");
            p_run_ACTION_with_batch_correction = (Ptr_run_ACTION_with_batch_correction)R_GetCCallable("ACTIONet", "_ACTIONet_run_ACTION_with_batch_correction");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_run_ACTION_with_batch_correction(Shield<SEXP>(Rcpp::wrap(S_r)), Shield<SEXP>(Rcpp::wrap(batch)), Shield<SEXP>(Rcpp::wrap(k_min)), Shield<SEXP>(Rcpp::wrap(k_max)), Shield<SEXP>(Rcpp::wrap(thread_no)), Shield<SEXP>(Rcpp::wrap(max_it)), Shield<SEXP>(Rcpp::wrap(max_correction_rounds)), Shield<SEXP>(Rcpp::wrap(lambda)), Shield<SEXP>(Rcpp::wrap(min_delta)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline mat compute_marker_aggregate_stats(sp_mat& G, sp_mat& S, sp_mat& marker_mat, double alpha = 0.85, int max_it = 5, int thread_no = 0, bool ignore_baseline_expression = false) {
        typedef SEXP(*Ptr_compute_marker_aggregate_stats)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_compute_marker_aggregate_stats p_compute_marker_aggregate_stats = NULL;
        if (p_compute_marker_aggregate_stats == NULL) {
            validateSignature("mat(*compute_marker_aggregate_stats)(sp_mat&,sp_mat&,sp_mat&,double,int,int,bool)");
            p_compute_marker_aggregate_stats = (Ptr_compute_marker_aggregate_stats)R_GetCCallable("ACTIONet", "_ACTIONet_compute_marker_aggregate_stats");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_marker_aggregate_stats(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(marker_mat)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(max_it)), Shield<SEXP>(Rcpp::wrap(thread_no)), Shield<SEXP>(Rcpp::wrap(ignore_baseline_expression)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline sp_mat LSI(sp_mat& X, double size_factor = 100000) {
        typedef SEXP(*Ptr_LSI)(SEXP,SEXP);
        static Ptr_LSI p_LSI = NULL;
        if (p_LSI == NULL) {
            validateSignature("sp_mat(*LSI)(sp_mat&,double)");
            p_LSI = (Ptr_LSI)R_GetCCallable("ACTIONet", "_ACTIONet_LSI");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_LSI(Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(size_factor)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<sp_mat >(rcpp_result_gen);
    }

    inline mat compute_marker_aggregate_stats_TFIDF_sum_smoothed(sp_mat& G, sp_mat& S, sp_mat& marker_mat, double alpha = 0.85, int max_it = 5, int perm_no = 100, int thread_no = 0, int normalization = 1) {
        typedef SEXP(*Ptr_compute_marker_aggregate_stats_TFIDF_sum_smoothed)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_compute_marker_aggregate_stats_TFIDF_sum_smoothed p_compute_marker_aggregate_stats_TFIDF_sum_smoothed = NULL;
        if (p_compute_marker_aggregate_stats_TFIDF_sum_smoothed == NULL) {
            validateSignature("mat(*compute_marker_aggregate_stats_TFIDF_sum_smoothed)(sp_mat&,sp_mat&,sp_mat&,double,int,int,int,int)");
            p_compute_marker_aggregate_stats_TFIDF_sum_smoothed = (Ptr_compute_marker_aggregate_stats_TFIDF_sum_smoothed)R_GetCCallable("ACTIONet", "_ACTIONet_compute_marker_aggregate_stats_TFIDF_sum_smoothed");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_marker_aggregate_stats_TFIDF_sum_smoothed(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(marker_mat)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(max_it)), Shield<SEXP>(Rcpp::wrap(perm_no)), Shield<SEXP>(Rcpp::wrap(thread_no)), Shield<SEXP>(Rcpp::wrap(normalization)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline List autocorrelation_Geary(sp_mat G, mat scores, int normalization_method = 1, int perm_no = 30, int thread_no = 0) {
        typedef SEXP(*Ptr_autocorrelation_Geary)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_autocorrelation_Geary p_autocorrelation_Geary = NULL;
        if (p_autocorrelation_Geary == NULL) {
            validateSignature("List(*autocorrelation_Geary)(sp_mat,mat,int,int,int)");
            p_autocorrelation_Geary = (Ptr_autocorrelation_Geary)R_GetCCallable("ACTIONet", "_ACTIONet_autocorrelation_Geary");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_autocorrelation_Geary(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(scores)), Shield<SEXP>(Rcpp::wrap(normalization_method)), Shield<SEXP>(Rcpp::wrap(perm_no)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List autocorrelation_Geary_full(mat G, mat scores, int normalization_method = 1, int perm_no = 30, int thread_no = 0) {
        typedef SEXP(*Ptr_autocorrelation_Geary_full)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_autocorrelation_Geary_full p_autocorrelation_Geary_full = NULL;
        if (p_autocorrelation_Geary_full == NULL) {
            validateSignature("List(*autocorrelation_Geary_full)(mat,mat,int,int,int)");
            p_autocorrelation_Geary_full = (Ptr_autocorrelation_Geary_full)R_GetCCallable("ACTIONet", "_ACTIONet_autocorrelation_Geary_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_autocorrelation_Geary_full(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(scores)), Shield<SEXP>(Rcpp::wrap(normalization_method)), Shield<SEXP>(Rcpp::wrap(perm_no)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List autocorrelation_Moran(sp_mat G, mat scores, int normalization_method = 1, int perm_no = 30, int thread_no = 0) {
        typedef SEXP(*Ptr_autocorrelation_Moran)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_autocorrelation_Moran p_autocorrelation_Moran = NULL;
        if (p_autocorrelation_Moran == NULL) {
            validateSignature("List(*autocorrelation_Moran)(sp_mat,mat,int,int,int)");
            p_autocorrelation_Moran = (Ptr_autocorrelation_Moran)R_GetCCallable("ACTIONet", "_ACTIONet_autocorrelation_Moran");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_autocorrelation_Moran(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(scores)), Shield<SEXP>(Rcpp::wrap(normalization_method)), Shield<SEXP>(Rcpp::wrap(perm_no)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List autocorrelation_Moran_full(mat G, mat scores, int normalization_method = 1, int perm_no = 30, int thread_no = 0) {
        typedef SEXP(*Ptr_autocorrelation_Moran_full)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_autocorrelation_Moran_full p_autocorrelation_Moran_full = NULL;
        if (p_autocorrelation_Moran_full == NULL) {
            validateSignature("List(*autocorrelation_Moran_full)(mat,mat,int,int,int)");
            p_autocorrelation_Moran_full = (Ptr_autocorrelation_Moran_full)R_GetCCallable("ACTIONet", "_ACTIONet_autocorrelation_Moran_full");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_autocorrelation_Moran_full(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(scores)), Shield<SEXP>(Rcpp::wrap(normalization_method)), Shield<SEXP>(Rcpp::wrap(perm_no)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline vec spmat_vec_product(sp_mat& A, vec& x) {
        typedef SEXP(*Ptr_spmat_vec_product)(SEXP,SEXP);
        static Ptr_spmat_vec_product p_spmat_vec_product = NULL;
        if (p_spmat_vec_product == NULL) {
            validateSignature("vec(*spmat_vec_product)(sp_mat&,vec&)");
            p_spmat_vec_product = (Ptr_spmat_vec_product)R_GetCCallable("ACTIONet", "_ACTIONet_spmat_vec_product");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_spmat_vec_product(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(x)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<vec >(rcpp_result_gen);
    }

    inline mat spmat_mat_product(sp_mat& A, mat& B) {
        typedef SEXP(*Ptr_spmat_mat_product)(SEXP,SEXP);
        static Ptr_spmat_mat_product p_spmat_mat_product = NULL;
        if (p_spmat_mat_product == NULL) {
            validateSignature("mat(*spmat_mat_product)(sp_mat&,mat&)");
            p_spmat_mat_product = (Ptr_spmat_mat_product)R_GetCCallable("ACTIONet", "_ACTIONet_spmat_mat_product");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_spmat_mat_product(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(B)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline sp_mat spmat_spmat_product(sp_mat& A, sp_mat& B) {
        typedef SEXP(*Ptr_spmat_spmat_product)(SEXP,SEXP);
        static Ptr_spmat_spmat_product p_spmat_spmat_product = NULL;
        if (p_spmat_spmat_product == NULL) {
            validateSignature("sp_mat(*spmat_spmat_product)(sp_mat&,sp_mat&)");
            p_spmat_spmat_product = (Ptr_spmat_spmat_product)R_GetCCallable("ACTIONet", "_ACTIONet_spmat_spmat_product");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_spmat_spmat_product(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(B)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<sp_mat >(rcpp_result_gen);
    }

    inline mat spmat_mat_product_parallel(sp_mat& A, mat& B, int thread_no) {
        typedef SEXP(*Ptr_spmat_mat_product_parallel)(SEXP,SEXP,SEXP);
        static Ptr_spmat_mat_product_parallel p_spmat_mat_product_parallel = NULL;
        if (p_spmat_mat_product_parallel == NULL) {
            validateSignature("mat(*spmat_mat_product_parallel)(sp_mat&,mat&,int)");
            p_spmat_mat_product_parallel = (Ptr_spmat_mat_product_parallel)R_GetCCallable("ACTIONet", "_ACTIONet_spmat_mat_product_parallel");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_spmat_mat_product_parallel(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(B)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline mat mat_mat_product_parallel(mat& A, mat& B, int thread_no) {
        typedef SEXP(*Ptr_mat_mat_product_parallel)(SEXP,SEXP,SEXP);
        static Ptr_mat_mat_product_parallel p_mat_mat_product_parallel = NULL;
        if (p_mat_mat_product_parallel == NULL) {
            validateSignature("mat(*mat_mat_product_parallel)(mat&,mat&,int)");
            p_mat_mat_product_parallel = (Ptr_mat_mat_product_parallel)R_GetCCallable("ACTIONet", "_ACTIONet_mat_mat_product_parallel");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_mat_mat_product_parallel(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(B)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline mat transform_layout(sp_mat& G, mat reference_coordinates, const std::string& method = "umap", bool presmooth_network = false, double min_dist = 1, double spread = 1, double gamma = 1.0, unsigned int n_epochs = 500, int thread_no = 0, int seed = 0, double learning_rate = 1.0, int sim2dist = 2) {
        typedef SEXP(*Ptr_transform_layout)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_transform_layout p_transform_layout = NULL;
        if (p_transform_layout == NULL) {
            validateSignature("mat(*transform_layout)(sp_mat&,mat,const std::string&,bool,double,double,double,unsigned int,int,int,double,int)");
            p_transform_layout = (Ptr_transform_layout)R_GetCCallable("ACTIONet", "_ACTIONet_transform_layout");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_transform_layout(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(reference_coordinates)), Shield<SEXP>(Rcpp::wrap(method)), Shield<SEXP>(Rcpp::wrap(presmooth_network)), Shield<SEXP>(Rcpp::wrap(min_dist)), Shield<SEXP>(Rcpp::wrap(spread)), Shield<SEXP>(Rcpp::wrap(gamma)), Shield<SEXP>(Rcpp::wrap(n_epochs)), Shield<SEXP>(Rcpp::wrap(thread_no)), Shield<SEXP>(Rcpp::wrap(seed)), Shield<SEXP>(Rcpp::wrap(learning_rate)), Shield<SEXP>(Rcpp::wrap(sim2dist)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline sp_mat normalize_adj(sp_mat& G, int norm_type = 0) {
        typedef SEXP(*Ptr_normalize_adj)(SEXP,SEXP);
        static Ptr_normalize_adj p_normalize_adj = NULL;
        if (p_normalize_adj == NULL) {
            validateSignature("sp_mat(*normalize_adj)(sp_mat&,int)");
            p_normalize_adj = (Ptr_normalize_adj)R_GetCCallable("ACTIONet", "_ACTIONet_normalize_adj");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_normalize_adj(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(norm_type)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<sp_mat >(rcpp_result_gen);
    }

    inline mat compute_network_diffusion_Chebyshev(sp_mat& P, mat& X0, int thread_no = 0, double alpha = 0.85, int max_it = 5, double res_threshold = 1e-8) {
        typedef SEXP(*Ptr_compute_network_diffusion_Chebyshev)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_compute_network_diffusion_Chebyshev p_compute_network_diffusion_Chebyshev = NULL;
        if (p_compute_network_diffusion_Chebyshev == NULL) {
            validateSignature("mat(*compute_network_diffusion_Chebyshev)(sp_mat&,mat&,int,double,int,double)");
            p_compute_network_diffusion_Chebyshev = (Ptr_compute_network_diffusion_Chebyshev)R_GetCCallable("ACTIONet", "_ACTIONet_compute_network_diffusion_Chebyshev");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_network_diffusion_Chebyshev(Shield<SEXP>(Rcpp::wrap(P)), Shield<SEXP>(Rcpp::wrap(X0)), Shield<SEXP>(Rcpp::wrap(thread_no)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(max_it)), Shield<SEXP>(Rcpp::wrap(res_threshold)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline mat compute_network_diffusion_approx(sp_mat& G, mat& X0, int thread_no = 0, double alpha = 0.85, int max_it = 5, double res_threshold = 1e-8, int norm_type = 0) {
        typedef SEXP(*Ptr_compute_network_diffusion_approx)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_compute_network_diffusion_approx p_compute_network_diffusion_approx = NULL;
        if (p_compute_network_diffusion_approx == NULL) {
            validateSignature("mat(*compute_network_diffusion_approx)(sp_mat&,mat&,int,double,int,double,int)");
            p_compute_network_diffusion_approx = (Ptr_compute_network_diffusion_approx)R_GetCCallable("ACTIONet", "_ACTIONet_compute_network_diffusion_approx");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_network_diffusion_approx(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(X0)), Shield<SEXP>(Rcpp::wrap(thread_no)), Shield<SEXP>(Rcpp::wrap(alpha)), Shield<SEXP>(Rcpp::wrap(max_it)), Shield<SEXP>(Rcpp::wrap(res_threshold)), Shield<SEXP>(Rcpp::wrap(norm_type)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline mat compute_marker_aggregate_stats_nonparametric(mat& S, sp_mat& marker_mat, int thread_no = 0) {
        typedef SEXP(*Ptr_compute_marker_aggregate_stats_nonparametric)(SEXP,SEXP,SEXP);
        static Ptr_compute_marker_aggregate_stats_nonparametric p_compute_marker_aggregate_stats_nonparametric = NULL;
        if (p_compute_marker_aggregate_stats_nonparametric == NULL) {
            validateSignature("mat(*compute_marker_aggregate_stats_nonparametric)(mat&,sp_mat&,int)");
            p_compute_marker_aggregate_stats_nonparametric = (Ptr_compute_marker_aggregate_stats_nonparametric)R_GetCCallable("ACTIONet", "_ACTIONet_compute_marker_aggregate_stats_nonparametric");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_marker_aggregate_stats_nonparametric(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(marker_mat)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline mat compute_markers_eigengene(mat& S, sp_mat& marker_mat, int normalization = 0, int thread_no = 0) {
        typedef SEXP(*Ptr_compute_markers_eigengene)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_compute_markers_eigengene p_compute_markers_eigengene = NULL;
        if (p_compute_markers_eigengene == NULL) {
            validateSignature("mat(*compute_markers_eigengene)(mat&,sp_mat&,int,int)");
            p_compute_markers_eigengene = (Ptr_compute_markers_eigengene)R_GetCCallable("ACTIONet", "_ACTIONet_compute_markers_eigengene");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_markers_eigengene(Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(marker_mat)), Shield<SEXP>(Rcpp::wrap(normalization)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline vec sweepcut(sp_mat& A, vec s, int min_size = 5, int max_size = -1) {
        typedef SEXP(*Ptr_sweepcut)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_sweepcut p_sweepcut = NULL;
        if (p_sweepcut == NULL) {
            validateSignature("vec(*sweepcut)(sp_mat&,vec,int,int)");
            p_sweepcut = (Ptr_sweepcut)R_GetCCallable("ACTIONet", "_ACTIONet_sweepcut");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sweepcut(Shield<SEXP>(Rcpp::wrap(A)), Shield<SEXP>(Rcpp::wrap(s)), Shield<SEXP>(Rcpp::wrap(min_size)), Shield<SEXP>(Rcpp::wrap(max_size)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<vec >(rcpp_result_gen);
    }

    inline mat aggregate_genesets_mahalanobis_2archs(sp_mat& G, sp_mat& S, sp_mat& marker_mat, int network_normalization_method = 0, int expression_normalization_method = 0, int gene_scaling_method = 0, double pre_alpha = 0.85, double post_alpha = 0.85, int thread_no = 0) {
        typedef SEXP(*Ptr_aggregate_genesets_mahalanobis_2archs)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_aggregate_genesets_mahalanobis_2archs p_aggregate_genesets_mahalanobis_2archs = NULL;
        if (p_aggregate_genesets_mahalanobis_2archs == NULL) {
            validateSignature("mat(*aggregate_genesets_mahalanobis_2archs)(sp_mat&,sp_mat&,sp_mat&,int,int,int,double,double,int)");
            p_aggregate_genesets_mahalanobis_2archs = (Ptr_aggregate_genesets_mahalanobis_2archs)R_GetCCallable("ACTIONet", "_ACTIONet_aggregate_genesets_mahalanobis_2archs");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_aggregate_genesets_mahalanobis_2archs(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(marker_mat)), Shield<SEXP>(Rcpp::wrap(network_normalization_method)), Shield<SEXP>(Rcpp::wrap(expression_normalization_method)), Shield<SEXP>(Rcpp::wrap(gene_scaling_method)), Shield<SEXP>(Rcpp::wrap(pre_alpha)), Shield<SEXP>(Rcpp::wrap(post_alpha)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline mat aggregate_genesets_mahalanobis_2gmm(sp_mat& G, sp_mat& S, sp_mat& marker_mat, int network_normalization_method = 0, int expression_normalization_method = 0, int gene_scaling_method = 0, double pre_alpha = 0.85, double post_alpha = 0.85, int thread_no = 0) {
        typedef SEXP(*Ptr_aggregate_genesets_mahalanobis_2gmm)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_aggregate_genesets_mahalanobis_2gmm p_aggregate_genesets_mahalanobis_2gmm = NULL;
        if (p_aggregate_genesets_mahalanobis_2gmm == NULL) {
            validateSignature("mat(*aggregate_genesets_mahalanobis_2gmm)(sp_mat&,sp_mat&,sp_mat&,int,int,int,double,double,int)");
            p_aggregate_genesets_mahalanobis_2gmm = (Ptr_aggregate_genesets_mahalanobis_2gmm)R_GetCCallable("ACTIONet", "_ACTIONet_aggregate_genesets_mahalanobis_2gmm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_aggregate_genesets_mahalanobis_2gmm(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(marker_mat)), Shield<SEXP>(Rcpp::wrap(network_normalization_method)), Shield<SEXP>(Rcpp::wrap(expression_normalization_method)), Shield<SEXP>(Rcpp::wrap(gene_scaling_method)), Shield<SEXP>(Rcpp::wrap(pre_alpha)), Shield<SEXP>(Rcpp::wrap(post_alpha)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline mat aggregate_genesets_weighted_enrichment(sp_mat& G, sp_mat& S, sp_mat& marker_mat, int network_normalization_method = 0, int expression_normalization_method = 0, int gene_scaling_method = 3, double pre_alpha = 0.85, double post_alpha = 0.85, int thread_no = 0) {
        typedef SEXP(*Ptr_aggregate_genesets_weighted_enrichment)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_aggregate_genesets_weighted_enrichment p_aggregate_genesets_weighted_enrichment = NULL;
        if (p_aggregate_genesets_weighted_enrichment == NULL) {
            validateSignature("mat(*aggregate_genesets_weighted_enrichment)(sp_mat&,sp_mat&,sp_mat&,int,int,int,double,double,int)");
            p_aggregate_genesets_weighted_enrichment = (Ptr_aggregate_genesets_weighted_enrichment)R_GetCCallable("ACTIONet", "_ACTIONet_aggregate_genesets_weighted_enrichment");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_aggregate_genesets_weighted_enrichment(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(marker_mat)), Shield<SEXP>(Rcpp::wrap(network_normalization_method)), Shield<SEXP>(Rcpp::wrap(expression_normalization_method)), Shield<SEXP>(Rcpp::wrap(gene_scaling_method)), Shield<SEXP>(Rcpp::wrap(pre_alpha)), Shield<SEXP>(Rcpp::wrap(post_alpha)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline mat aggregate_genesets_weighted_enrichment_permutation(sp_mat& G, sp_mat& S, sp_mat& marker_mat, int network_normalization_method = 0, int expression_normalization_method = 0, int gene_scaling_method = 3, double pre_alpha = 0.85, double post_alpha = 0.85, int thread_no = 0, int perm_no = 30) {
        typedef SEXP(*Ptr_aggregate_genesets_weighted_enrichment_permutation)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_aggregate_genesets_weighted_enrichment_permutation p_aggregate_genesets_weighted_enrichment_permutation = NULL;
        if (p_aggregate_genesets_weighted_enrichment_permutation == NULL) {
            validateSignature("mat(*aggregate_genesets_weighted_enrichment_permutation)(sp_mat&,sp_mat&,sp_mat&,int,int,int,double,double,int,int)");
            p_aggregate_genesets_weighted_enrichment_permutation = (Ptr_aggregate_genesets_weighted_enrichment_permutation)R_GetCCallable("ACTIONet", "_ACTIONet_aggregate_genesets_weighted_enrichment_permutation");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_aggregate_genesets_weighted_enrichment_permutation(Shield<SEXP>(Rcpp::wrap(G)), Shield<SEXP>(Rcpp::wrap(S)), Shield<SEXP>(Rcpp::wrap(marker_mat)), Shield<SEXP>(Rcpp::wrap(network_normalization_method)), Shield<SEXP>(Rcpp::wrap(expression_normalization_method)), Shield<SEXP>(Rcpp::wrap(gene_scaling_method)), Shield<SEXP>(Rcpp::wrap(pre_alpha)), Shield<SEXP>(Rcpp::wrap(post_alpha)), Shield<SEXP>(Rcpp::wrap(thread_no)), Shield<SEXP>(Rcpp::wrap(perm_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline List recursiveNMU(mat M, int dim = 100, int max_SVD_iter = 1000, int max_iter_inner = 100) {
        typedef SEXP(*Ptr_recursiveNMU)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_recursiveNMU p_recursiveNMU = NULL;
        if (p_recursiveNMU == NULL) {
            validateSignature("List(*recursiveNMU)(mat,int,int,int)");
            p_recursiveNMU = (Ptr_recursiveNMU)R_GetCCallable("ACTIONet", "_ACTIONet_recursiveNMU");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_recursiveNMU(Shield<SEXP>(Rcpp::wrap(M)), Shield<SEXP>(Rcpp::wrap(dim)), Shield<SEXP>(Rcpp::wrap(max_SVD_iter)), Shield<SEXP>(Rcpp::wrap(max_iter_inner)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List recursiveNMU_mine(mat M, int dim = 100, int max_SVD_iter = 1000, int max_iter_inner = 100) {
        typedef SEXP(*Ptr_recursiveNMU_mine)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_recursiveNMU_mine p_recursiveNMU_mine = NULL;
        if (p_recursiveNMU_mine == NULL) {
            validateSignature("List(*recursiveNMU_mine)(mat,int,int,int)");
            p_recursiveNMU_mine = (Ptr_recursiveNMU_mine)R_GetCCallable("ACTIONet", "_ACTIONet_recursiveNMU_mine");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_recursiveNMU_mine(Shield<SEXP>(Rcpp::wrap(M)), Shield<SEXP>(Rcpp::wrap(dim)), Shield<SEXP>(Rcpp::wrap(max_SVD_iter)), Shield<SEXP>(Rcpp::wrap(max_iter_inner)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline mat normalize_mat(mat& X, int normalization = 0) {
        typedef SEXP(*Ptr_normalize_mat)(SEXP,SEXP);
        static Ptr_normalize_mat p_normalize_mat = NULL;
        if (p_normalize_mat == NULL) {
            validateSignature("mat(*normalize_mat)(mat&,int)");
            p_normalize_mat = (Ptr_normalize_mat)R_GetCCallable("ACTIONet", "_ACTIONet_normalize_mat");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_normalize_mat(Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(normalization)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<mat >(rcpp_result_gen);
    }

    inline sp_mat normalize_spmat(sp_mat& X, int normalization = 0) {
        typedef SEXP(*Ptr_normalize_spmat)(SEXP,SEXP);
        static Ptr_normalize_spmat p_normalize_spmat = NULL;
        if (p_normalize_spmat == NULL) {
            validateSignature("sp_mat(*normalize_spmat)(sp_mat&,int)");
            p_normalize_spmat = (Ptr_normalize_spmat)R_GetCCallable("ACTIONet", "_ACTIONet_normalize_spmat");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_normalize_spmat(Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(normalization)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<sp_mat >(rcpp_result_gen);
    }

    inline vec xicor(vec xvec, vec yvec, bool compute_pval = true, int seed = 0) {
        typedef SEXP(*Ptr_xicor)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_xicor p_xicor = NULL;
        if (p_xicor == NULL) {
            validateSignature("vec(*xicor)(vec,vec,bool,int)");
            p_xicor = (Ptr_xicor)R_GetCCallable("ACTIONet", "_ACTIONet_xicor");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_xicor(Shield<SEXP>(Rcpp::wrap(xvec)), Shield<SEXP>(Rcpp::wrap(yvec)), Shield<SEXP>(Rcpp::wrap(compute_pval)), Shield<SEXP>(Rcpp::wrap(seed)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<vec >(rcpp_result_gen);
    }

    inline List XICOR(mat& X, mat& Y, bool compute_pval = true, int seed = 0, int thread_no = 0) {
        typedef SEXP(*Ptr_XICOR)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_XICOR p_XICOR = NULL;
        if (p_XICOR == NULL) {
            validateSignature("List(*XICOR)(mat&,mat&,bool,int,int)");
            p_XICOR = (Ptr_XICOR)R_GetCCallable("ACTIONet", "_ACTIONet_XICOR");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_XICOR(Shield<SEXP>(Rcpp::wrap(X)), Shield<SEXP>(Rcpp::wrap(Y)), Shield<SEXP>(Rcpp::wrap(compute_pval)), Shield<SEXP>(Rcpp::wrap(seed)), Shield<SEXP>(Rcpp::wrap(thread_no)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

}

#endif // RCPP_ACTIONet_RCPPEXPORTS_H_GEN_
