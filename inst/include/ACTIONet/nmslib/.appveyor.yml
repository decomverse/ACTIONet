version: '{build}'
image: Visual Studio 2015
platform:
- x64
# Disable temporarily
#- x86
environment:
  global:
    DISTUTILS_USE_SDK: 1
    MSSdk: 1
    # SSE2 is the default in recent VS, but let's keep for older versions, see, e.g.: https://github.com/weidai11/cryptopp/issues/445
    ARCH: SSE2
  matrix:
  - PYTHON: 27
  - PYTHON: 35
  - PYTHON: 36
  - PYTHON: 37
  - PYTHON: 38
  # Need to disable b/c it doesn't work with older Visual Studio images.
  #- PYTHON: 39
  pypipassword:
    # https://ci.appveyor.com/tools/encrypt
    secure: 7hxZ+XinYPLuIS1aHZbTcA==
install:
- cmd: '"%VS140COMNTOOLS%\..\..\VC\vcvarsall.bat" %PLATFORM%'
- cmd: git config core.symlinks true
- cmd: git reset --hard
- ps: Remove-Item -Recurse -Force C:/cygwin
- ps: Remove-Item -Recurse -Force C:/cygwin64
- ps: |
    if ($env:PYTHON) {
      if ($env:PLATFORM -eq "x64") { $env:PYTHON = "$env:PYTHON-x64" }
      $env:PATH = "C:\Python$env:PYTHON\;C:\Python$env:PYTHON\Scripts\;$env:PATH"
      python -m pip install --disable-pip-version-check --upgrade pip
      python -m pip install -qq setuptools six psutil
    } elseif ($env:CONDA) {
      if ($env:CONDA -eq "27") { $env:CONDA = "" }
      if ($env:PLATFORM -eq "x64") { $env:CONDA = "$env:CONDA-x64" }
      $env:PATH = "C:\Miniconda$env:CONDA\;C:\Miniconda$env:CONDA\Scripts\;$env:PATH"
      conda config --set always_yes yes --set changeps1 no
      conda config --add channels conda-forge
      conda update -q conda
      conda install -q conda-build
    }
- cmd: |
    ECHO Platform : %PLATFORM%
    ECHO Python : %PYTHON%
    ECHO PATH : %PATH%
    dir "C:\"
    python --version
    python -m pip --version
build_script:
- ps: cd python_bindings
- cmd: |
    python -m pip install -qq -r requirements.txt
    python setup.py build_ext
    python -m pip install -U .
- ps: cd ..

test_script:
- ps: cd python_bindings
- cmd: python setup.py test
- ps: cd ..

deploy_script: 
- ps: |
    if ($env:APPVEYOR_REPO_TAG -ne "true") {
      echo "Skipping deployment because this is not a tagged commit"
      return
    }
    # Specify account details for PyPI
    echo "Deploying..."
    mv .pypirc $env:USERPROFILE\\.pypirc
    # Workaround required to ensure setup.py finds the .pypirc under Windows
    $env:HOME=$env:USERPROFILE
    # Install wheel-building support
    python -m pip install --user wheel twine
    # Build wheel and upload
    cd python_bindings
    python setup.py build_ext
    python setup.py sdist bdist_wheel
    python -m twine upload -r pypi -p $env:pypipassword --skip-existing dist/*
    echo "Deployment complete"

