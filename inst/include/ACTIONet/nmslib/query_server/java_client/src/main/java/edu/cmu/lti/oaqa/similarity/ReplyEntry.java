/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.cmu.lti.oaqa.similarity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-11-03")
public class ReplyEntry implements org.apache.thrift.TBase<ReplyEntry, ReplyEntry._Fields>, java.io.Serializable, Cloneable, Comparable<ReplyEntry> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReplyEntry");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DIST_FIELD_DESC = new org.apache.thrift.protocol.TField("dist", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField EXTERN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("externId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("obj", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ReplyEntryStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ReplyEntryTupleSchemeFactory();

  public int id; // required
  public double dist; // required
  public java.lang.String externId; // optional
  public java.nio.ByteBuffer obj; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    DIST((short)2, "dist"),
    EXTERN_ID((short)3, "externId"),
    OBJ((short)4, "obj");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // DIST
          return DIST;
        case 3: // EXTERN_ID
          return EXTERN_ID;
        case 4: // OBJ
          return OBJ;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __DIST_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EXTERN_ID,_Fields.OBJ};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIST, new org.apache.thrift.meta_data.FieldMetaData("dist", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXTERN_ID, new org.apache.thrift.meta_data.FieldMetaData("externId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OBJ, new org.apache.thrift.meta_data.FieldMetaData("obj", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReplyEntry.class, metaDataMap);
  }

  public ReplyEntry() {
  }

  public ReplyEntry(
    int id,
    double dist)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.dist = dist;
    setDistIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReplyEntry(ReplyEntry other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.dist = other.dist;
    if (other.isSetExternId()) {
      this.externId = other.externId;
    }
    if (other.isSetObj()) {
      this.obj = org.apache.thrift.TBaseHelper.copyBinary(other.obj);
    }
  }

  public ReplyEntry deepCopy() {
    return new ReplyEntry(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setDistIsSet(false);
    this.dist = 0.0;
    this.externId = null;
    this.obj = null;
  }

  public int getId() {
    return this.id;
  }

  public ReplyEntry setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public double getDist() {
    return this.dist;
  }

  public ReplyEntry setDist(double dist) {
    this.dist = dist;
    setDistIsSet(true);
    return this;
  }

  public void unsetDist() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DIST_ISSET_ID);
  }

  /** Returns true if field dist is set (has been assigned a value) and false otherwise */
  public boolean isSetDist() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DIST_ISSET_ID);
  }

  public void setDistIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DIST_ISSET_ID, value);
  }

  public java.lang.String getExternId() {
    return this.externId;
  }

  public ReplyEntry setExternId(java.lang.String externId) {
    this.externId = externId;
    return this;
  }

  public void unsetExternId() {
    this.externId = null;
  }

  /** Returns true if field externId is set (has been assigned a value) and false otherwise */
  public boolean isSetExternId() {
    return this.externId != null;
  }

  public void setExternIdIsSet(boolean value) {
    if (!value) {
      this.externId = null;
    }
  }

  public byte[] getObj() {
    setObj(org.apache.thrift.TBaseHelper.rightSize(obj));
    return obj == null ? null : obj.array();
  }

  public java.nio.ByteBuffer bufferForObj() {
    return org.apache.thrift.TBaseHelper.copyBinary(obj);
  }

  public ReplyEntry setObj(byte[] obj) {
    this.obj = obj == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(obj.clone());
    return this;
  }

  public ReplyEntry setObj(java.nio.ByteBuffer obj) {
    this.obj = org.apache.thrift.TBaseHelper.copyBinary(obj);
    return this;
  }

  public void unsetObj() {
    this.obj = null;
  }

  /** Returns true if field obj is set (has been assigned a value) and false otherwise */
  public boolean isSetObj() {
    return this.obj != null;
  }

  public void setObjIsSet(boolean value) {
    if (!value) {
      this.obj = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case DIST:
      if (value == null) {
        unsetDist();
      } else {
        setDist((java.lang.Double)value);
      }
      break;

    case EXTERN_ID:
      if (value == null) {
        unsetExternId();
      } else {
        setExternId((java.lang.String)value);
      }
      break;

    case OBJ:
      if (value == null) {
        unsetObj();
      } else {
        if (value instanceof byte[]) {
          setObj((byte[])value);
        } else {
          setObj((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case DIST:
      return getDist();

    case EXTERN_ID:
      return getExternId();

    case OBJ:
      return getObj();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case DIST:
      return isSetDist();
    case EXTERN_ID:
      return isSetExternId();
    case OBJ:
      return isSetObj();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ReplyEntry)
      return this.equals((ReplyEntry)that);
    return false;
  }

  public boolean equals(ReplyEntry that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_dist = true;
    boolean that_present_dist = true;
    if (this_present_dist || that_present_dist) {
      if (!(this_present_dist && that_present_dist))
        return false;
      if (this.dist != that.dist)
        return false;
    }

    boolean this_present_externId = true && this.isSetExternId();
    boolean that_present_externId = true && that.isSetExternId();
    if (this_present_externId || that_present_externId) {
      if (!(this_present_externId && that_present_externId))
        return false;
      if (!this.externId.equals(that.externId))
        return false;
    }

    boolean this_present_obj = true && this.isSetObj();
    boolean that_present_obj = true && that.isSetObj();
    if (this_present_obj || that_present_obj) {
      if (!(this_present_obj && that_present_obj))
        return false;
      if (!this.obj.equals(that.obj))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dist);

    hashCode = hashCode * 8191 + ((isSetExternId()) ? 131071 : 524287);
    if (isSetExternId())
      hashCode = hashCode * 8191 + externId.hashCode();

    hashCode = hashCode * 8191 + ((isSetObj()) ? 131071 : 524287);
    if (isSetObj())
      hashCode = hashCode * 8191 + obj.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ReplyEntry other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDist()).compareTo(other.isSetDist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dist, other.dist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExternId()).compareTo(other.isSetExternId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.externId, other.externId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetObj()).compareTo(other.isSetObj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obj, other.obj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ReplyEntry(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dist:");
    sb.append(this.dist);
    first = false;
    if (isSetExternId()) {
      if (!first) sb.append(", ");
      sb.append("externId:");
      if (this.externId == null) {
        sb.append("null");
      } else {
        sb.append(this.externId);
      }
      first = false;
    }
    if (isSetObj()) {
      if (!first) sb.append(", ");
      sb.append("obj:");
      if (this.obj == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.obj, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dist' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReplyEntryStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReplyEntryStandardScheme getScheme() {
      return new ReplyEntryStandardScheme();
    }
  }

  private static class ReplyEntryStandardScheme extends org.apache.thrift.scheme.StandardScheme<ReplyEntry> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReplyEntry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DIST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dist = iprot.readDouble();
              struct.setDistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXTERN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.externId = iprot.readString();
              struct.setExternIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OBJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.obj = iprot.readBinary();
              struct.setObjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDist()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dist' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReplyEntry struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DIST_FIELD_DESC);
      oprot.writeDouble(struct.dist);
      oprot.writeFieldEnd();
      if (struct.externId != null) {
        if (struct.isSetExternId()) {
          oprot.writeFieldBegin(EXTERN_ID_FIELD_DESC);
          oprot.writeString(struct.externId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.obj != null) {
        if (struct.isSetObj()) {
          oprot.writeFieldBegin(OBJ_FIELD_DESC);
          oprot.writeBinary(struct.obj);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReplyEntryTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReplyEntryTupleScheme getScheme() {
      return new ReplyEntryTupleScheme();
    }
  }

  private static class ReplyEntryTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReplyEntry> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReplyEntry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.id);
      oprot.writeDouble(struct.dist);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetExternId()) {
        optionals.set(0);
      }
      if (struct.isSetObj()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetExternId()) {
        oprot.writeString(struct.externId);
      }
      if (struct.isSetObj()) {
        oprot.writeBinary(struct.obj);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReplyEntry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      struct.dist = iprot.readDouble();
      struct.setDistIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.externId = iprot.readString();
        struct.setExternIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.obj = iprot.readBinary();
        struct.setObjIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

