/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef QueryService_H
#define QueryService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "protocol_types.h"

namespace similarity {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class QueryServiceIf {
 public:
  virtual ~QueryServiceIf() {}
  virtual void setQueryTimeParams(const std::string& queryTimeParams) = 0;
  virtual void knnQuery(ReplyEntryList& _return, const int32_t k, const std::string& queryObj, const bool retExternId, const bool retObj) = 0;
  virtual void rangeQuery(ReplyEntryList& _return, const double r, const std::string& queryObj, const bool retExternId, const bool retObj) = 0;
  virtual void knnQueryBatch(ReplyEntryListBatch& _return, const int32_t k, const std::vector<std::string> & queryObj, const bool retExternId, const bool retObj, const int32_t numThreads) = 0;
  virtual double getDistance(const std::string& obj1, const std::string& obj2) = 0;
};

class QueryServiceIfFactory {
 public:
  typedef QueryServiceIf Handler;

  virtual ~QueryServiceIfFactory() {}

  virtual QueryServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(QueryServiceIf* /* handler */) = 0;
};

class QueryServiceIfSingletonFactory : virtual public QueryServiceIfFactory {
 public:
  QueryServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<QueryServiceIf>& iface) : iface_(iface) {}
  virtual ~QueryServiceIfSingletonFactory() {}

  virtual QueryServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(QueryServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<QueryServiceIf> iface_;
};

class QueryServiceNull : virtual public QueryServiceIf {
 public:
  virtual ~QueryServiceNull() {}
  void setQueryTimeParams(const std::string& /* queryTimeParams */) {
    return;
  }
  void knnQuery(ReplyEntryList& /* _return */, const int32_t /* k */, const std::string& /* queryObj */, const bool /* retExternId */, const bool /* retObj */) {
    return;
  }
  void rangeQuery(ReplyEntryList& /* _return */, const double /* r */, const std::string& /* queryObj */, const bool /* retExternId */, const bool /* retObj */) {
    return;
  }
  void knnQueryBatch(ReplyEntryListBatch& /* _return */, const int32_t /* k */, const std::vector<std::string> & /* queryObj */, const bool /* retExternId */, const bool /* retObj */, const int32_t /* numThreads */) {
    return;
  }
  double getDistance(const std::string& /* obj1 */, const std::string& /* obj2 */) {
    double _return = (double)0;
    return _return;
  }
};


class QueryService_setQueryTimeParams_args {
 public:

  QueryService_setQueryTimeParams_args(const QueryService_setQueryTimeParams_args&);
  QueryService_setQueryTimeParams_args& operator=(const QueryService_setQueryTimeParams_args&);
  QueryService_setQueryTimeParams_args() : queryTimeParams() {
  }

  virtual ~QueryService_setQueryTimeParams_args() throw();
  std::string queryTimeParams;

  void __set_queryTimeParams(const std::string& val);

  bool operator == (const QueryService_setQueryTimeParams_args & rhs) const
  {
    if (!(queryTimeParams == rhs.queryTimeParams))
      return false;
    return true;
  }
  bool operator != (const QueryService_setQueryTimeParams_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_setQueryTimeParams_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QueryService_setQueryTimeParams_pargs {
 public:


  virtual ~QueryService_setQueryTimeParams_pargs() throw();
  const std::string* queryTimeParams;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_setQueryTimeParams_result__isset {
  _QueryService_setQueryTimeParams_result__isset() : err(false) {}
  bool err :1;
} _QueryService_setQueryTimeParams_result__isset;

class QueryService_setQueryTimeParams_result {
 public:

  QueryService_setQueryTimeParams_result(const QueryService_setQueryTimeParams_result&);
  QueryService_setQueryTimeParams_result& operator=(const QueryService_setQueryTimeParams_result&);
  QueryService_setQueryTimeParams_result() {
  }

  virtual ~QueryService_setQueryTimeParams_result() throw();
  QueryException err;

  _QueryService_setQueryTimeParams_result__isset __isset;

  void __set_err(const QueryException& val);

  bool operator == (const QueryService_setQueryTimeParams_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const QueryService_setQueryTimeParams_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_setQueryTimeParams_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_setQueryTimeParams_presult__isset {
  _QueryService_setQueryTimeParams_presult__isset() : err(false) {}
  bool err :1;
} _QueryService_setQueryTimeParams_presult__isset;

class QueryService_setQueryTimeParams_presult {
 public:


  virtual ~QueryService_setQueryTimeParams_presult() throw();
  QueryException err;

  _QueryService_setQueryTimeParams_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class QueryService_knnQuery_args {
 public:

  QueryService_knnQuery_args(const QueryService_knnQuery_args&);
  QueryService_knnQuery_args& operator=(const QueryService_knnQuery_args&);
  QueryService_knnQuery_args() : k(0), queryObj(), retExternId(0), retObj(0) {
  }

  virtual ~QueryService_knnQuery_args() throw();
  int32_t k;
  std::string queryObj;
  bool retExternId;
  bool retObj;

  void __set_k(const int32_t val);

  void __set_queryObj(const std::string& val);

  void __set_retExternId(const bool val);

  void __set_retObj(const bool val);

  bool operator == (const QueryService_knnQuery_args & rhs) const
  {
    if (!(k == rhs.k))
      return false;
    if (!(queryObj == rhs.queryObj))
      return false;
    if (!(retExternId == rhs.retExternId))
      return false;
    if (!(retObj == rhs.retObj))
      return false;
    return true;
  }
  bool operator != (const QueryService_knnQuery_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_knnQuery_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QueryService_knnQuery_pargs {
 public:


  virtual ~QueryService_knnQuery_pargs() throw();
  const int32_t* k;
  const std::string* queryObj;
  const bool* retExternId;
  const bool* retObj;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_knnQuery_result__isset {
  _QueryService_knnQuery_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _QueryService_knnQuery_result__isset;

class QueryService_knnQuery_result {
 public:

  QueryService_knnQuery_result(const QueryService_knnQuery_result&);
  QueryService_knnQuery_result& operator=(const QueryService_knnQuery_result&);
  QueryService_knnQuery_result() {
  }

  virtual ~QueryService_knnQuery_result() throw();
  ReplyEntryList success;
  QueryException err;

  _QueryService_knnQuery_result__isset __isset;

  void __set_success(const ReplyEntryList& val);

  void __set_err(const QueryException& val);

  bool operator == (const QueryService_knnQuery_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const QueryService_knnQuery_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_knnQuery_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_knnQuery_presult__isset {
  _QueryService_knnQuery_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _QueryService_knnQuery_presult__isset;

class QueryService_knnQuery_presult {
 public:


  virtual ~QueryService_knnQuery_presult() throw();
  ReplyEntryList* success;
  QueryException err;

  _QueryService_knnQuery_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class QueryService_rangeQuery_args {
 public:

  QueryService_rangeQuery_args(const QueryService_rangeQuery_args&);
  QueryService_rangeQuery_args& operator=(const QueryService_rangeQuery_args&);
  QueryService_rangeQuery_args() : r(0), queryObj(), retExternId(0), retObj(0) {
  }

  virtual ~QueryService_rangeQuery_args() throw();
  double r;
  std::string queryObj;
  bool retExternId;
  bool retObj;

  void __set_r(const double val);

  void __set_queryObj(const std::string& val);

  void __set_retExternId(const bool val);

  void __set_retObj(const bool val);

  bool operator == (const QueryService_rangeQuery_args & rhs) const
  {
    if (!(r == rhs.r))
      return false;
    if (!(queryObj == rhs.queryObj))
      return false;
    if (!(retExternId == rhs.retExternId))
      return false;
    if (!(retObj == rhs.retObj))
      return false;
    return true;
  }
  bool operator != (const QueryService_rangeQuery_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_rangeQuery_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QueryService_rangeQuery_pargs {
 public:


  virtual ~QueryService_rangeQuery_pargs() throw();
  const double* r;
  const std::string* queryObj;
  const bool* retExternId;
  const bool* retObj;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_rangeQuery_result__isset {
  _QueryService_rangeQuery_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _QueryService_rangeQuery_result__isset;

class QueryService_rangeQuery_result {
 public:

  QueryService_rangeQuery_result(const QueryService_rangeQuery_result&);
  QueryService_rangeQuery_result& operator=(const QueryService_rangeQuery_result&);
  QueryService_rangeQuery_result() {
  }

  virtual ~QueryService_rangeQuery_result() throw();
  ReplyEntryList success;
  QueryException err;

  _QueryService_rangeQuery_result__isset __isset;

  void __set_success(const ReplyEntryList& val);

  void __set_err(const QueryException& val);

  bool operator == (const QueryService_rangeQuery_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const QueryService_rangeQuery_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_rangeQuery_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_rangeQuery_presult__isset {
  _QueryService_rangeQuery_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _QueryService_rangeQuery_presult__isset;

class QueryService_rangeQuery_presult {
 public:


  virtual ~QueryService_rangeQuery_presult() throw();
  ReplyEntryList* success;
  QueryException err;

  _QueryService_rangeQuery_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class QueryService_knnQueryBatch_args {
 public:

  QueryService_knnQueryBatch_args(const QueryService_knnQueryBatch_args&);
  QueryService_knnQueryBatch_args& operator=(const QueryService_knnQueryBatch_args&);
  QueryService_knnQueryBatch_args() : k(0), retExternId(0), retObj(0), numThreads(0) {
  }

  virtual ~QueryService_knnQueryBatch_args() throw();
  int32_t k;
  std::vector<std::string>  queryObj;
  bool retExternId;
  bool retObj;
  int32_t numThreads;

  void __set_k(const int32_t val);

  void __set_queryObj(const std::vector<std::string> & val);

  void __set_retExternId(const bool val);

  void __set_retObj(const bool val);

  void __set_numThreads(const int32_t val);

  bool operator == (const QueryService_knnQueryBatch_args & rhs) const
  {
    if (!(k == rhs.k))
      return false;
    if (!(queryObj == rhs.queryObj))
      return false;
    if (!(retExternId == rhs.retExternId))
      return false;
    if (!(retObj == rhs.retObj))
      return false;
    if (!(numThreads == rhs.numThreads))
      return false;
    return true;
  }
  bool operator != (const QueryService_knnQueryBatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_knnQueryBatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QueryService_knnQueryBatch_pargs {
 public:


  virtual ~QueryService_knnQueryBatch_pargs() throw();
  const int32_t* k;
  const std::vector<std::string> * queryObj;
  const bool* retExternId;
  const bool* retObj;
  const int32_t* numThreads;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_knnQueryBatch_result__isset {
  _QueryService_knnQueryBatch_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _QueryService_knnQueryBatch_result__isset;

class QueryService_knnQueryBatch_result {
 public:

  QueryService_knnQueryBatch_result(const QueryService_knnQueryBatch_result&);
  QueryService_knnQueryBatch_result& operator=(const QueryService_knnQueryBatch_result&);
  QueryService_knnQueryBatch_result() {
  }

  virtual ~QueryService_knnQueryBatch_result() throw();
  ReplyEntryListBatch success;
  QueryException err;

  _QueryService_knnQueryBatch_result__isset __isset;

  void __set_success(const ReplyEntryListBatch& val);

  void __set_err(const QueryException& val);

  bool operator == (const QueryService_knnQueryBatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const QueryService_knnQueryBatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_knnQueryBatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_knnQueryBatch_presult__isset {
  _QueryService_knnQueryBatch_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _QueryService_knnQueryBatch_presult__isset;

class QueryService_knnQueryBatch_presult {
 public:


  virtual ~QueryService_knnQueryBatch_presult() throw();
  ReplyEntryListBatch* success;
  QueryException err;

  _QueryService_knnQueryBatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class QueryService_getDistance_args {
 public:

  QueryService_getDistance_args(const QueryService_getDistance_args&);
  QueryService_getDistance_args& operator=(const QueryService_getDistance_args&);
  QueryService_getDistance_args() : obj1(), obj2() {
  }

  virtual ~QueryService_getDistance_args() throw();
  std::string obj1;
  std::string obj2;

  void __set_obj1(const std::string& val);

  void __set_obj2(const std::string& val);

  bool operator == (const QueryService_getDistance_args & rhs) const
  {
    if (!(obj1 == rhs.obj1))
      return false;
    if (!(obj2 == rhs.obj2))
      return false;
    return true;
  }
  bool operator != (const QueryService_getDistance_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_getDistance_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class QueryService_getDistance_pargs {
 public:


  virtual ~QueryService_getDistance_pargs() throw();
  const std::string* obj1;
  const std::string* obj2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_getDistance_result__isset {
  _QueryService_getDistance_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _QueryService_getDistance_result__isset;

class QueryService_getDistance_result {
 public:

  QueryService_getDistance_result(const QueryService_getDistance_result&);
  QueryService_getDistance_result& operator=(const QueryService_getDistance_result&);
  QueryService_getDistance_result() : success(0) {
  }

  virtual ~QueryService_getDistance_result() throw();
  double success;
  QueryException err;

  _QueryService_getDistance_result__isset __isset;

  void __set_success(const double val);

  void __set_err(const QueryException& val);

  bool operator == (const QueryService_getDistance_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const QueryService_getDistance_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryService_getDistance_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _QueryService_getDistance_presult__isset {
  _QueryService_getDistance_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _QueryService_getDistance_presult__isset;

class QueryService_getDistance_presult {
 public:


  virtual ~QueryService_getDistance_presult() throw();
  double* success;
  QueryException err;

  _QueryService_getDistance_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class QueryServiceClient : virtual public QueryServiceIf {
 public:
  QueryServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  QueryServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void setQueryTimeParams(const std::string& queryTimeParams);
  void send_setQueryTimeParams(const std::string& queryTimeParams);
  void recv_setQueryTimeParams();
  void knnQuery(ReplyEntryList& _return, const int32_t k, const std::string& queryObj, const bool retExternId, const bool retObj);
  void send_knnQuery(const int32_t k, const std::string& queryObj, const bool retExternId, const bool retObj);
  void recv_knnQuery(ReplyEntryList& _return);
  void rangeQuery(ReplyEntryList& _return, const double r, const std::string& queryObj, const bool retExternId, const bool retObj);
  void send_rangeQuery(const double r, const std::string& queryObj, const bool retExternId, const bool retObj);
  void recv_rangeQuery(ReplyEntryList& _return);
  void knnQueryBatch(ReplyEntryListBatch& _return, const int32_t k, const std::vector<std::string> & queryObj, const bool retExternId, const bool retObj, const int32_t numThreads);
  void send_knnQueryBatch(const int32_t k, const std::vector<std::string> & queryObj, const bool retExternId, const bool retObj, const int32_t numThreads);
  void recv_knnQueryBatch(ReplyEntryListBatch& _return);
  double getDistance(const std::string& obj1, const std::string& obj2);
  void send_getDistance(const std::string& obj1, const std::string& obj2);
  double recv_getDistance();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class QueryServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<QueryServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (QueryServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_setQueryTimeParams(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_knnQuery(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rangeQuery(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_knnQueryBatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDistance(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  QueryServiceProcessor(::apache::thrift::stdcxx::shared_ptr<QueryServiceIf> iface) :
    iface_(iface) {
    processMap_["setQueryTimeParams"] = &QueryServiceProcessor::process_setQueryTimeParams;
    processMap_["knnQuery"] = &QueryServiceProcessor::process_knnQuery;
    processMap_["rangeQuery"] = &QueryServiceProcessor::process_rangeQuery;
    processMap_["knnQueryBatch"] = &QueryServiceProcessor::process_knnQueryBatch;
    processMap_["getDistance"] = &QueryServiceProcessor::process_getDistance;
  }

  virtual ~QueryServiceProcessor() {}
};

class QueryServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  QueryServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< QueryServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< QueryServiceIfFactory > handlerFactory_;
};

class QueryServiceMultiface : virtual public QueryServiceIf {
 public:
  QueryServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<QueryServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~QueryServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<QueryServiceIf> > ifaces_;
  QueryServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<QueryServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void setQueryTimeParams(const std::string& queryTimeParams) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setQueryTimeParams(queryTimeParams);
    }
    ifaces_[i]->setQueryTimeParams(queryTimeParams);
  }

  void knnQuery(ReplyEntryList& _return, const int32_t k, const std::string& queryObj, const bool retExternId, const bool retObj) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->knnQuery(_return, k, queryObj, retExternId, retObj);
    }
    ifaces_[i]->knnQuery(_return, k, queryObj, retExternId, retObj);
    return;
  }

  void rangeQuery(ReplyEntryList& _return, const double r, const std::string& queryObj, const bool retExternId, const bool retObj) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rangeQuery(_return, r, queryObj, retExternId, retObj);
    }
    ifaces_[i]->rangeQuery(_return, r, queryObj, retExternId, retObj);
    return;
  }

  void knnQueryBatch(ReplyEntryListBatch& _return, const int32_t k, const std::vector<std::string> & queryObj, const bool retExternId, const bool retObj, const int32_t numThreads) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->knnQueryBatch(_return, k, queryObj, retExternId, retObj, numThreads);
    }
    ifaces_[i]->knnQueryBatch(_return, k, queryObj, retExternId, retObj, numThreads);
    return;
  }

  double getDistance(const std::string& obj1, const std::string& obj2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDistance(obj1, obj2);
    }
    return ifaces_[i]->getDistance(obj1, obj2);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class QueryServiceConcurrentClient : virtual public QueryServiceIf {
 public:
  QueryServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  QueryServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void setQueryTimeParams(const std::string& queryTimeParams);
  int32_t send_setQueryTimeParams(const std::string& queryTimeParams);
  void recv_setQueryTimeParams(const int32_t seqid);
  void knnQuery(ReplyEntryList& _return, const int32_t k, const std::string& queryObj, const bool retExternId, const bool retObj);
  int32_t send_knnQuery(const int32_t k, const std::string& queryObj, const bool retExternId, const bool retObj);
  void recv_knnQuery(ReplyEntryList& _return, const int32_t seqid);
  void rangeQuery(ReplyEntryList& _return, const double r, const std::string& queryObj, const bool retExternId, const bool retObj);
  int32_t send_rangeQuery(const double r, const std::string& queryObj, const bool retExternId, const bool retObj);
  void recv_rangeQuery(ReplyEntryList& _return, const int32_t seqid);
  void knnQueryBatch(ReplyEntryListBatch& _return, const int32_t k, const std::vector<std::string> & queryObj, const bool retExternId, const bool retObj, const int32_t numThreads);
  int32_t send_knnQueryBatch(const int32_t k, const std::vector<std::string> & queryObj, const bool retExternId, const bool retObj, const int32_t numThreads);
  void recv_knnQueryBatch(ReplyEntryListBatch& _return, const int32_t seqid);
  double getDistance(const std::string& obj1, const std::string& obj2);
  int32_t send_getDistance(const std::string& obj1, const std::string& obj2);
  double recv_getDistance(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
