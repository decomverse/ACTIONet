#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def setQueryTimeParams(self, queryTimeParams):
        """
        Parameters:
         - queryTimeParams
        """
        pass

    def knnQuery(self, k, queryObj, retExternId, retObj):
        """
        Parameters:
         - k
         - queryObj
         - retExternId
         - retObj
        """
        pass

    def rangeQuery(self, r, queryObj, retExternId, retObj):
        """
        Parameters:
         - r
         - queryObj
         - retExternId
         - retObj
        """
        pass

    def knnQueryBatch(self, k, queryObj, retExternId, retObj, numThreads):
        """
        Parameters:
         - k
         - queryObj
         - retExternId
         - retObj
         - numThreads
        """
        pass

    def getDistance(self, obj1, obj2):
        """
        Parameters:
         - obj1
         - obj2
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def setQueryTimeParams(self, queryTimeParams):
        """
        Parameters:
         - queryTimeParams
        """
        self.send_setQueryTimeParams(queryTimeParams)
        self.recv_setQueryTimeParams()

    def send_setQueryTimeParams(self, queryTimeParams):
        self._oprot.writeMessageBegin('setQueryTimeParams', TMessageType.CALL, self._seqid)
        args = setQueryTimeParams_args()
        args.queryTimeParams = queryTimeParams
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_setQueryTimeParams(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = setQueryTimeParams_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.err is not None:
            raise result.err
        return

    def knnQuery(self, k, queryObj, retExternId, retObj):
        """
        Parameters:
         - k
         - queryObj
         - retExternId
         - retObj
        """
        self.send_knnQuery(k, queryObj, retExternId, retObj)
        return self.recv_knnQuery()

    def send_knnQuery(self, k, queryObj, retExternId, retObj):
        self._oprot.writeMessageBegin('knnQuery', TMessageType.CALL, self._seqid)
        args = knnQuery_args()
        args.k = k
        args.queryObj = queryObj
        args.retExternId = retExternId
        args.retObj = retObj
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_knnQuery(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = knnQuery_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.err is not None:
            raise result.err
        raise TApplicationException(TApplicationException.MISSING_RESULT, "knnQuery failed: unknown result")

    def rangeQuery(self, r, queryObj, retExternId, retObj):
        """
        Parameters:
         - r
         - queryObj
         - retExternId
         - retObj
        """
        self.send_rangeQuery(r, queryObj, retExternId, retObj)
        return self.recv_rangeQuery()

    def send_rangeQuery(self, r, queryObj, retExternId, retObj):
        self._oprot.writeMessageBegin('rangeQuery', TMessageType.CALL, self._seqid)
        args = rangeQuery_args()
        args.r = r
        args.queryObj = queryObj
        args.retExternId = retExternId
        args.retObj = retObj
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_rangeQuery(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = rangeQuery_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.err is not None:
            raise result.err
        raise TApplicationException(TApplicationException.MISSING_RESULT, "rangeQuery failed: unknown result")

    def knnQueryBatch(self, k, queryObj, retExternId, retObj, numThreads):
        """
        Parameters:
         - k
         - queryObj
         - retExternId
         - retObj
         - numThreads
        """
        self.send_knnQueryBatch(k, queryObj, retExternId, retObj, numThreads)
        return self.recv_knnQueryBatch()

    def send_knnQueryBatch(self, k, queryObj, retExternId, retObj, numThreads):
        self._oprot.writeMessageBegin('knnQueryBatch', TMessageType.CALL, self._seqid)
        args = knnQueryBatch_args()
        args.k = k
        args.queryObj = queryObj
        args.retExternId = retExternId
        args.retObj = retObj
        args.numThreads = numThreads
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_knnQueryBatch(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = knnQueryBatch_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.err is not None:
            raise result.err
        raise TApplicationException(TApplicationException.MISSING_RESULT, "knnQueryBatch failed: unknown result")

    def getDistance(self, obj1, obj2):
        """
        Parameters:
         - obj1
         - obj2
        """
        self.send_getDistance(obj1, obj2)
        return self.recv_getDistance()

    def send_getDistance(self, obj1, obj2):
        self._oprot.writeMessageBegin('getDistance', TMessageType.CALL, self._seqid)
        args = getDistance_args()
        args.obj1 = obj1
        args.obj2 = obj2
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getDistance(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getDistance_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.err is not None:
            raise result.err
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getDistance failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["setQueryTimeParams"] = Processor.process_setQueryTimeParams
        self._processMap["knnQuery"] = Processor.process_knnQuery
        self._processMap["rangeQuery"] = Processor.process_rangeQuery
        self._processMap["knnQueryBatch"] = Processor.process_knnQueryBatch
        self._processMap["getDistance"] = Processor.process_getDistance

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_setQueryTimeParams(self, seqid, iprot, oprot):
        args = setQueryTimeParams_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = setQueryTimeParams_result()
        try:
            self._handler.setQueryTimeParams(args.queryTimeParams)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except QueryException as err:
            msg_type = TMessageType.REPLY
            result.err = err
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("setQueryTimeParams", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_knnQuery(self, seqid, iprot, oprot):
        args = knnQuery_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = knnQuery_result()
        try:
            result.success = self._handler.knnQuery(args.k, args.queryObj, args.retExternId, args.retObj)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except QueryException as err:
            msg_type = TMessageType.REPLY
            result.err = err
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("knnQuery", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_rangeQuery(self, seqid, iprot, oprot):
        args = rangeQuery_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = rangeQuery_result()
        try:
            result.success = self._handler.rangeQuery(args.r, args.queryObj, args.retExternId, args.retObj)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except QueryException as err:
            msg_type = TMessageType.REPLY
            result.err = err
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("rangeQuery", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_knnQueryBatch(self, seqid, iprot, oprot):
        args = knnQueryBatch_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = knnQueryBatch_result()
        try:
            result.success = self._handler.knnQueryBatch(args.k, args.queryObj, args.retExternId, args.retObj, args.numThreads)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except QueryException as err:
            msg_type = TMessageType.REPLY
            result.err = err
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("knnQueryBatch", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getDistance(self, seqid, iprot, oprot):
        args = getDistance_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getDistance_result()
        try:
            result.success = self._handler.getDistance(args.obj1, args.obj2)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except QueryException as err:
            msg_type = TMessageType.REPLY
            result.err = err
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getDistance", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class setQueryTimeParams_args(object):
    """
    Attributes:
     - queryTimeParams
    """


    def __init__(self, queryTimeParams=None,):
        self.queryTimeParams = queryTimeParams

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.queryTimeParams = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('setQueryTimeParams_args')
        if self.queryTimeParams is not None:
            oprot.writeFieldBegin('queryTimeParams', TType.STRING, 1)
            oprot.writeString(self.queryTimeParams.encode('utf-8') if sys.version_info[0] == 2 else self.queryTimeParams)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.queryTimeParams is None:
            raise TProtocolException(message='Required field queryTimeParams is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(setQueryTimeParams_args)
setQueryTimeParams_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'queryTimeParams', 'UTF8', None, ),  # 1
)


class setQueryTimeParams_result(object):
    """
    Attributes:
     - err
    """


    def __init__(self, err=None,):
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.err = QueryException()
                    self.err.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('setQueryTimeParams_result')
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRUCT, 1)
            self.err.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(setQueryTimeParams_result)
setQueryTimeParams_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'err', [QueryException, None], None, ),  # 1
)


class knnQuery_args(object):
    """
    Attributes:
     - k
     - queryObj
     - retExternId
     - retObj
    """


    def __init__(self, k=None, queryObj=None, retExternId=None, retObj=None,):
        self.k = k
        self.queryObj = queryObj
        self.retExternId = retExternId
        self.retObj = retObj

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.k = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.queryObj = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.retExternId = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.retObj = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knnQuery_args')
        if self.k is not None:
            oprot.writeFieldBegin('k', TType.I32, 1)
            oprot.writeI32(self.k)
            oprot.writeFieldEnd()
        if self.queryObj is not None:
            oprot.writeFieldBegin('queryObj', TType.STRING, 2)
            oprot.writeBinary(self.queryObj)
            oprot.writeFieldEnd()
        if self.retExternId is not None:
            oprot.writeFieldBegin('retExternId', TType.BOOL, 3)
            oprot.writeBool(self.retExternId)
            oprot.writeFieldEnd()
        if self.retObj is not None:
            oprot.writeFieldBegin('retObj', TType.BOOL, 4)
            oprot.writeBool(self.retObj)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.k is None:
            raise TProtocolException(message='Required field k is unset!')
        if self.queryObj is None:
            raise TProtocolException(message='Required field queryObj is unset!')
        if self.retExternId is None:
            raise TProtocolException(message='Required field retExternId is unset!')
        if self.retObj is None:
            raise TProtocolException(message='Required field retObj is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knnQuery_args)
knnQuery_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'k', None, None, ),  # 1
    (2, TType.STRING, 'queryObj', 'BINARY', None, ),  # 2
    (3, TType.BOOL, 'retExternId', None, None, ),  # 3
    (4, TType.BOOL, 'retObj', None, None, ),  # 4
)


class knnQuery_result(object):
    """
    Attributes:
     - success
     - err
    """


    def __init__(self, success=None, err=None,):
        self.success = success
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ReplyEntry()
                        _elem5.read(iprot)
                        self.success.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.err = QueryException()
                    self.err.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knnQuery_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter6 in self.success:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRUCT, 1)
            self.err.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knnQuery_result)
knnQuery_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [ReplyEntry, None], False), None, ),  # 0
    (1, TType.STRUCT, 'err', [QueryException, None], None, ),  # 1
)


class rangeQuery_args(object):
    """
    Attributes:
     - r
     - queryObj
     - retExternId
     - retObj
    """


    def __init__(self, r=None, queryObj=None, retExternId=None, retObj=None,):
        self.r = r
        self.queryObj = queryObj
        self.retExternId = retExternId
        self.retObj = retObj

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.r = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.queryObj = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.retExternId = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.retObj = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('rangeQuery_args')
        if self.r is not None:
            oprot.writeFieldBegin('r', TType.DOUBLE, 1)
            oprot.writeDouble(self.r)
            oprot.writeFieldEnd()
        if self.queryObj is not None:
            oprot.writeFieldBegin('queryObj', TType.STRING, 2)
            oprot.writeBinary(self.queryObj)
            oprot.writeFieldEnd()
        if self.retExternId is not None:
            oprot.writeFieldBegin('retExternId', TType.BOOL, 3)
            oprot.writeBool(self.retExternId)
            oprot.writeFieldEnd()
        if self.retObj is not None:
            oprot.writeFieldBegin('retObj', TType.BOOL, 4)
            oprot.writeBool(self.retObj)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.r is None:
            raise TProtocolException(message='Required field r is unset!')
        if self.queryObj is None:
            raise TProtocolException(message='Required field queryObj is unset!')
        if self.retExternId is None:
            raise TProtocolException(message='Required field retExternId is unset!')
        if self.retObj is None:
            raise TProtocolException(message='Required field retObj is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(rangeQuery_args)
rangeQuery_args.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'r', None, None, ),  # 1
    (2, TType.STRING, 'queryObj', 'BINARY', None, ),  # 2
    (3, TType.BOOL, 'retExternId', None, None, ),  # 3
    (4, TType.BOOL, 'retObj', None, None, ),  # 4
)


class rangeQuery_result(object):
    """
    Attributes:
     - success
     - err
    """


    def __init__(self, success=None, err=None,):
        self.success = success
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = ReplyEntry()
                        _elem12.read(iprot)
                        self.success.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.err = QueryException()
                    self.err.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('rangeQuery_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter13 in self.success:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRUCT, 1)
            self.err.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(rangeQuery_result)
rangeQuery_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [ReplyEntry, None], False), None, ),  # 0
    (1, TType.STRUCT, 'err', [QueryException, None], None, ),  # 1
)


class knnQueryBatch_args(object):
    """
    Attributes:
     - k
     - queryObj
     - retExternId
     - retObj
     - numThreads
    """


    def __init__(self, k=None, queryObj=None, retExternId=None, retObj=None, numThreads=None,):
        self.k = k
        self.queryObj = queryObj
        self.retExternId = retExternId
        self.retObj = retObj
        self.numThreads = numThreads

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.k = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.queryObj = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = iprot.readBinary()
                        self.queryObj.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.retExternId = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.retObj = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.numThreads = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knnQueryBatch_args')
        if self.k is not None:
            oprot.writeFieldBegin('k', TType.I32, 1)
            oprot.writeI32(self.k)
            oprot.writeFieldEnd()
        if self.queryObj is not None:
            oprot.writeFieldBegin('queryObj', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.queryObj))
            for iter20 in self.queryObj:
                oprot.writeBinary(iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.retExternId is not None:
            oprot.writeFieldBegin('retExternId', TType.BOOL, 3)
            oprot.writeBool(self.retExternId)
            oprot.writeFieldEnd()
        if self.retObj is not None:
            oprot.writeFieldBegin('retObj', TType.BOOL, 4)
            oprot.writeBool(self.retObj)
            oprot.writeFieldEnd()
        if self.numThreads is not None:
            oprot.writeFieldBegin('numThreads', TType.I32, 5)
            oprot.writeI32(self.numThreads)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.k is None:
            raise TProtocolException(message='Required field k is unset!')
        if self.queryObj is None:
            raise TProtocolException(message='Required field queryObj is unset!')
        if self.retExternId is None:
            raise TProtocolException(message='Required field retExternId is unset!')
        if self.retObj is None:
            raise TProtocolException(message='Required field retObj is unset!')
        if self.numThreads is None:
            raise TProtocolException(message='Required field numThreads is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knnQueryBatch_args)
knnQueryBatch_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'k', None, None, ),  # 1
    (2, TType.LIST, 'queryObj', (TType.STRING, 'BINARY', False), None, ),  # 2
    (3, TType.BOOL, 'retExternId', None, None, ),  # 3
    (4, TType.BOOL, 'retObj', None, None, ),  # 4
    (5, TType.I32, 'numThreads', None, None, ),  # 5
)


class knnQueryBatch_result(object):
    """
    Attributes:
     - success
     - err
    """


    def __init__(self, success=None, err=None,):
        self.success = success
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = []
                        (_etype30, _size27) = iprot.readListBegin()
                        for _i31 in range(_size27):
                            _elem32 = ReplyEntry()
                            _elem32.read(iprot)
                            _elem26.append(_elem32)
                        iprot.readListEnd()
                        self.success.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.err = QueryException()
                    self.err.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('knnQueryBatch_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.LIST, len(self.success))
            for iter33 in self.success:
                oprot.writeListBegin(TType.STRUCT, len(iter33))
                for iter34 in iter33:
                    iter34.write(oprot)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRUCT, 1)
            self.err.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(knnQueryBatch_result)
knnQueryBatch_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.LIST, (TType.STRUCT, [ReplyEntry, None], False), False), None, ),  # 0
    (1, TType.STRUCT, 'err', [QueryException, None], None, ),  # 1
)


class getDistance_args(object):
    """
    Attributes:
     - obj1
     - obj2
    """


    def __init__(self, obj1=None, obj2=None,):
        self.obj1 = obj1
        self.obj2 = obj2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.obj1 = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.obj2 = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getDistance_args')
        if self.obj1 is not None:
            oprot.writeFieldBegin('obj1', TType.STRING, 1)
            oprot.writeBinary(self.obj1)
            oprot.writeFieldEnd()
        if self.obj2 is not None:
            oprot.writeFieldBegin('obj2', TType.STRING, 2)
            oprot.writeBinary(self.obj2)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.obj1 is None:
            raise TProtocolException(message='Required field obj1 is unset!')
        if self.obj2 is None:
            raise TProtocolException(message='Required field obj2 is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getDistance_args)
getDistance_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'obj1', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'obj2', 'BINARY', None, ),  # 2
)


class getDistance_result(object):
    """
    Attributes:
     - success
     - err
    """


    def __init__(self, success=None, err=None,):
        self.success = success
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.DOUBLE:
                    self.success = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.err = QueryException()
                    self.err.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getDistance_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.DOUBLE, 0)
            oprot.writeDouble(self.success)
            oprot.writeFieldEnd()
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.STRUCT, 1)
            self.err.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getDistance_result)
getDistance_result.thrift_spec = (
    (0, TType.DOUBLE, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'err', [QueryException, None], None, ),  # 1
)
fix_spec(all_structs)
del all_structs

