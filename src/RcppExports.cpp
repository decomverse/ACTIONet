// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/ACTIONet.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// set_seed
void set_seed(double seed);
static SEXP _ACTIONet_set_seed_try(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< double >::type seed(seedSEXP);
    set_seed(seed);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_set_seed(SEXP seedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_set_seed_try(seedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// IRLB_SVD
List IRLB_SVD(sp_mat& A, int dim, int iters, int seed, int verbose);
static SEXP _ACTIONet_IRLB_SVD_try(SEXP ASEXP, SEXP dimSEXP, SEXP itersSEXP, SEXP seedSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int >::type iters(itersSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(IRLB_SVD(A, dim, iters, seed, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_IRLB_SVD(SEXP ASEXP, SEXP dimSEXP, SEXP itersSEXP, SEXP seedSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_IRLB_SVD_try(ASEXP, dimSEXP, itersSEXP, seedSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// IRLB_SVD_full
List IRLB_SVD_full(mat& A, int dim, int iters, int seed, int verbose);
static SEXP _ACTIONet_IRLB_SVD_full_try(SEXP ASEXP, SEXP dimSEXP, SEXP itersSEXP, SEXP seedSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int >::type iters(itersSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(IRLB_SVD_full(A, dim, iters, seed, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_IRLB_SVD_full(SEXP ASEXP, SEXP dimSEXP, SEXP itersSEXP, SEXP seedSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_IRLB_SVD_full_try(ASEXP, dimSEXP, itersSEXP, seedSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// FengSVD
List FengSVD(sp_mat& A, int dim, int iters, int seed, int verbose);
static SEXP _ACTIONet_FengSVD_try(SEXP ASEXP, SEXP dimSEXP, SEXP itersSEXP, SEXP seedSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int >::type iters(itersSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(FengSVD(A, dim, iters, seed, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_FengSVD(SEXP ASEXP, SEXP dimSEXP, SEXP itersSEXP, SEXP seedSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_FengSVD_try(ASEXP, dimSEXP, itersSEXP, seedSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// FengSVD_full
List FengSVD_full(mat& A, int dim, int iters, int seed, int verbose);
static SEXP _ACTIONet_FengSVD_full_try(SEXP ASEXP, SEXP dimSEXP, SEXP itersSEXP, SEXP seedSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int >::type iters(itersSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(FengSVD_full(A, dim, iters, seed, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_FengSVD_full(SEXP ASEXP, SEXP dimSEXP, SEXP itersSEXP, SEXP seedSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_FengSVD_full_try(ASEXP, dimSEXP, itersSEXP, seedSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// HalkoSVD
List HalkoSVD(sp_mat& A, int dim, int iters, int seed, int verbose);
static SEXP _ACTIONet_HalkoSVD_try(SEXP ASEXP, SEXP dimSEXP, SEXP itersSEXP, SEXP seedSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int >::type iters(itersSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(HalkoSVD(A, dim, iters, seed, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_HalkoSVD(SEXP ASEXP, SEXP dimSEXP, SEXP itersSEXP, SEXP seedSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_HalkoSVD_try(ASEXP, dimSEXP, itersSEXP, seedSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// HalkoSVD_full
List HalkoSVD_full(mat& A, int dim, int iters, int seed, int verbose);
static SEXP _ACTIONet_HalkoSVD_full_try(SEXP ASEXP, SEXP dimSEXP, SEXP itersSEXP, SEXP seedSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< int >::type iters(itersSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(HalkoSVD_full(A, dim, iters, seed, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_HalkoSVD_full(SEXP ASEXP, SEXP dimSEXP, SEXP itersSEXP, SEXP seedSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_HalkoSVD_full_try(ASEXP, dimSEXP, itersSEXP, seedSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// reduce_kernel
List reduce_kernel(sp_mat& S, int reduced_dim, int iter, int seed, int SVD_algorithm, bool prenormalize, int verbose);
static SEXP _ACTIONet_reduce_kernel_try(SEXP SSEXP, SEXP reduced_dimSEXP, SEXP iterSEXP, SEXP seedSEXP, SEXP SVD_algorithmSEXP, SEXP prenormalizeSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type reduced_dim(reduced_dimSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type SVD_algorithm(SVD_algorithmSEXP);
    Rcpp::traits::input_parameter< bool >::type prenormalize(prenormalizeSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(reduce_kernel(S, reduced_dim, iter, seed, SVD_algorithm, prenormalize, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_reduce_kernel(SEXP SSEXP, SEXP reduced_dimSEXP, SEXP iterSEXP, SEXP seedSEXP, SEXP SVD_algorithmSEXP, SEXP prenormalizeSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_reduce_kernel_try(SSEXP, reduced_dimSEXP, iterSEXP, seedSEXP, SVD_algorithmSEXP, prenormalizeSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// reduce_kernel_full
List reduce_kernel_full(mat& S, int reduced_dim, int iter, int seed, int SVD_algorithm, bool prenormalize, int verbose);
static SEXP _ACTIONet_reduce_kernel_full_try(SEXP SSEXP, SEXP reduced_dimSEXP, SEXP iterSEXP, SEXP seedSEXP, SEXP SVD_algorithmSEXP, SEXP prenormalizeSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type reduced_dim(reduced_dimSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type SVD_algorithm(SVD_algorithmSEXP);
    Rcpp::traits::input_parameter< bool >::type prenormalize(prenormalizeSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(reduce_kernel_full(S, reduced_dim, iter, seed, SVD_algorithm, prenormalize, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_reduce_kernel_full(SEXP SSEXP, SEXP reduced_dimSEXP, SEXP iterSEXP, SEXP seedSEXP, SEXP SVD_algorithmSEXP, SEXP prenormalizeSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_reduce_kernel_full_try(SSEXP, reduced_dimSEXP, iterSEXP, seedSEXP, SVD_algorithmSEXP, prenormalizeSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// run_simplex_regression
mat run_simplex_regression(mat& A, mat& B, bool computeXtX);
static SEXP _ACTIONet_run_simplex_regression_try(SEXP ASEXP, SEXP BSEXP, SEXP computeXtXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< bool >::type computeXtX(computeXtXSEXP);
    rcpp_result_gen = Rcpp::wrap(run_simplex_regression(A, B, computeXtX));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_run_simplex_regression(SEXP ASEXP, SEXP BSEXP, SEXP computeXtXSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_run_simplex_regression_try(ASEXP, BSEXP, computeXtXSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// run_SPA
List run_SPA(mat& A, int k);
static SEXP _ACTIONet_run_SPA_try(SEXP ASEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(run_SPA(A, k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_run_SPA(SEXP ASEXP, SEXP kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_run_SPA_try(ASEXP, kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// run_SPA_rows_sparse
List run_SPA_rows_sparse(sp_mat& A, int k);
static SEXP _ACTIONet_run_SPA_rows_sparse_try(SEXP ASEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(run_SPA_rows_sparse(A, k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_run_SPA_rows_sparse(SEXP ASEXP, SEXP kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_run_SPA_rows_sparse_try(ASEXP, kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// run_ACTION
List run_ACTION(mat& S_r, int k_min, int k_max, int thread_no, int max_it, double min_delta);
static SEXP _ACTIONet_run_ACTION_try(SEXP S_rSEXP, SEXP k_minSEXP, SEXP k_maxSEXP, SEXP thread_noSEXP, SEXP max_itSEXP, SEXP min_deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type S_r(S_rSEXP);
    Rcpp::traits::input_parameter< int >::type k_min(k_minSEXP);
    Rcpp::traits::input_parameter< int >::type k_max(k_maxSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< double >::type min_delta(min_deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(run_ACTION(S_r, k_min, k_max, thread_no, max_it, min_delta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_run_ACTION(SEXP S_rSEXP, SEXP k_minSEXP, SEXP k_maxSEXP, SEXP thread_noSEXP, SEXP max_itSEXP, SEXP min_deltaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_run_ACTION_try(S_rSEXP, k_minSEXP, k_maxSEXP, thread_noSEXP, max_itSEXP, min_deltaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// run_ACTION_plus
List run_ACTION_plus(mat& S_r, int k_min, int k_max, int max_it, double min_delta, int max_trial);
static SEXP _ACTIONet_run_ACTION_plus_try(SEXP S_rSEXP, SEXP k_minSEXP, SEXP k_maxSEXP, SEXP max_itSEXP, SEXP min_deltaSEXP, SEXP max_trialSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type S_r(S_rSEXP);
    Rcpp::traits::input_parameter< int >::type k_min(k_minSEXP);
    Rcpp::traits::input_parameter< int >::type k_max(k_maxSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< double >::type min_delta(min_deltaSEXP);
    Rcpp::traits::input_parameter< int >::type max_trial(max_trialSEXP);
    rcpp_result_gen = Rcpp::wrap(run_ACTION_plus(S_r, k_min, k_max, max_it, min_delta, max_trial));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_run_ACTION_plus(SEXP S_rSEXP, SEXP k_minSEXP, SEXP k_maxSEXP, SEXP max_itSEXP, SEXP min_deltaSEXP, SEXP max_trialSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_run_ACTION_plus_try(S_rSEXP, k_minSEXP, k_maxSEXP, max_itSEXP, min_deltaSEXP, max_trialSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// run_AA
List run_AA(mat& A, mat& W0, int max_it, double min_delta);
static SEXP _ACTIONet_run_AA_try(SEXP ASEXP, SEXP W0SEXP, SEXP max_itSEXP, SEXP min_deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< mat& >::type W0(W0SEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< double >::type min_delta(min_deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(run_AA(A, W0, max_it, min_delta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_run_AA(SEXP ASEXP, SEXP W0SEXP, SEXP max_itSEXP, SEXP min_deltaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_run_AA_try(ASEXP, W0SEXP, max_itSEXP, min_deltaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// run_online_ACTION
List run_online_ACTION(mat& S_r, field<uvec> samples, int k_min, int k_max, int thread_no);
static SEXP _ACTIONet_run_online_ACTION_try(SEXP S_rSEXP, SEXP samplesSEXP, SEXP k_minSEXP, SEXP k_maxSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type S_r(S_rSEXP);
    Rcpp::traits::input_parameter< field<uvec> >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< int >::type k_min(k_minSEXP);
    Rcpp::traits::input_parameter< int >::type k_max(k_maxSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(run_online_ACTION(S_r, samples, k_min, k_max, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_run_online_ACTION(SEXP S_rSEXP, SEXP samplesSEXP, SEXP k_minSEXP, SEXP k_maxSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_run_online_ACTION_try(S_rSEXP, samplesSEXP, k_minSEXP, k_maxSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// run_weighted_ACTION
List run_weighted_ACTION(mat& S_r, vec w, int k_min, int k_max, int thread_no, int max_it, double min_delta);
static SEXP _ACTIONet_run_weighted_ACTION_try(SEXP S_rSEXP, SEXP wSEXP, SEXP k_minSEXP, SEXP k_maxSEXP, SEXP thread_noSEXP, SEXP max_itSEXP, SEXP min_deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type S_r(S_rSEXP);
    Rcpp::traits::input_parameter< vec >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type k_min(k_minSEXP);
    Rcpp::traits::input_parameter< int >::type k_max(k_maxSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< double >::type min_delta(min_deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(run_weighted_ACTION(S_r, w, k_min, k_max, thread_no, max_it, min_delta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_run_weighted_ACTION(SEXP S_rSEXP, SEXP wSEXP, SEXP k_minSEXP, SEXP k_maxSEXP, SEXP thread_noSEXP, SEXP max_itSEXP, SEXP min_deltaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_run_weighted_ACTION_try(S_rSEXP, wSEXP, k_minSEXP, k_maxSEXP, thread_noSEXP, max_itSEXP, min_deltaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// prune_archetypes
List prune_archetypes(const List& C_trace, const List& H_trace, double min_specificity_z_threshold, int min_cells);
static SEXP _ACTIONet_prune_archetypes_try(SEXP C_traceSEXP, SEXP H_traceSEXP, SEXP min_specificity_z_thresholdSEXP, SEXP min_cellsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const List& >::type C_trace(C_traceSEXP);
    Rcpp::traits::input_parameter< const List& >::type H_trace(H_traceSEXP);
    Rcpp::traits::input_parameter< double >::type min_specificity_z_threshold(min_specificity_z_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type min_cells(min_cellsSEXP);
    rcpp_result_gen = Rcpp::wrap(prune_archetypes(C_trace, H_trace, min_specificity_z_threshold, min_cells));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_prune_archetypes(SEXP C_traceSEXP, SEXP H_traceSEXP, SEXP min_specificity_z_thresholdSEXP, SEXP min_cellsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_prune_archetypes_try(C_traceSEXP, H_traceSEXP, min_specificity_z_thresholdSEXP, min_cellsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// unify_archetypes
List unify_archetypes(mat& S_r, mat& C_stacked, mat& H_stacked, double violation_threshold, int thread_no);
static SEXP _ACTIONet_unify_archetypes_try(SEXP S_rSEXP, SEXP C_stackedSEXP, SEXP H_stackedSEXP, SEXP violation_thresholdSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type S_r(S_rSEXP);
    Rcpp::traits::input_parameter< mat& >::type C_stacked(C_stackedSEXP);
    Rcpp::traits::input_parameter< mat& >::type H_stacked(H_stackedSEXP);
    Rcpp::traits::input_parameter< double >::type violation_threshold(violation_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(unify_archetypes(S_r, C_stacked, H_stacked, violation_threshold, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_unify_archetypes(SEXP S_rSEXP, SEXP C_stackedSEXP, SEXP H_stackedSEXP, SEXP violation_thresholdSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_unify_archetypes_try(S_rSEXP, C_stackedSEXP, H_stackedSEXP, violation_thresholdSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// build_ACTIONet
sp_mat build_ACTIONet(mat H_stacked, double density, int thread_no, bool mutual_edges_only, string distance_metric, string nn_approach, int k);
static SEXP _ACTIONet_build_ACTIONet_try(SEXP H_stackedSEXP, SEXP densitySEXP, SEXP thread_noSEXP, SEXP mutual_edges_onlySEXP, SEXP distance_metricSEXP, SEXP nn_approachSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat >::type H_stacked(H_stackedSEXP);
    Rcpp::traits::input_parameter< double >::type density(densitySEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    Rcpp::traits::input_parameter< bool >::type mutual_edges_only(mutual_edges_onlySEXP);
    Rcpp::traits::input_parameter< string >::type distance_metric(distance_metricSEXP);
    Rcpp::traits::input_parameter< string >::type nn_approach(nn_approachSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(build_ACTIONet(H_stacked, density, thread_no, mutual_edges_only, distance_metric, nn_approach, k));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_build_ACTIONet(SEXP H_stackedSEXP, SEXP densitySEXP, SEXP thread_noSEXP, SEXP mutual_edges_onlySEXP, SEXP distance_metricSEXP, SEXP nn_approachSEXP, SEXP kSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_build_ACTIONet_try(H_stackedSEXP, densitySEXP, thread_noSEXP, mutual_edges_onlySEXP, distance_metricSEXP, nn_approachSEXP, kSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// build_knn
sp_mat build_knn(mat H_stacked, double k, int thread_no, bool mutual_edges_only, string distance_metric);
static SEXP _ACTIONet_build_knn_try(SEXP H_stackedSEXP, SEXP kSEXP, SEXP thread_noSEXP, SEXP mutual_edges_onlySEXP, SEXP distance_metricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat >::type H_stacked(H_stackedSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    Rcpp::traits::input_parameter< bool >::type mutual_edges_only(mutual_edges_onlySEXP);
    Rcpp::traits::input_parameter< string >::type distance_metric(distance_metricSEXP);
    rcpp_result_gen = Rcpp::wrap(build_knn(H_stacked, k, thread_no, mutual_edges_only, distance_metric));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_build_knn(SEXP H_stackedSEXP, SEXP kSEXP, SEXP thread_noSEXP, SEXP mutual_edges_onlySEXP, SEXP distance_metricSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_build_knn_try(H_stackedSEXP, kSEXP, thread_noSEXP, mutual_edges_onlySEXP, distance_metricSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// layout_ACTIONet
List layout_ACTIONet(sp_mat& G, mat S_r, int compactness_level, unsigned int n_epochs, int layout_alg, int thread_no, int seed);
static SEXP _ACTIONet_layout_ACTIONet_try(SEXP GSEXP, SEXP S_rSEXP, SEXP compactness_levelSEXP, SEXP n_epochsSEXP, SEXP layout_algSEXP, SEXP thread_noSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< mat >::type S_r(S_rSEXP);
    Rcpp::traits::input_parameter< int >::type compactness_level(compactness_levelSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_epochs(n_epochsSEXP);
    Rcpp::traits::input_parameter< int >::type layout_alg(layout_algSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(layout_ACTIONet(G, S_r, compactness_level, n_epochs, layout_alg, thread_no, seed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_layout_ACTIONet(SEXP GSEXP, SEXP S_rSEXP, SEXP compactness_levelSEXP, SEXP n_epochsSEXP, SEXP layout_algSEXP, SEXP thread_noSEXP, SEXP seedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_layout_ACTIONet_try(GSEXP, S_rSEXP, compactness_levelSEXP, n_epochsSEXP, layout_algSEXP, thread_noSEXP, seedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// encode_ids
vector<string> encode_ids(vector<string> ids, string pass);
static SEXP _ACTIONet_encode_ids_try(SEXP idsSEXP, SEXP passSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< vector<string> >::type ids(idsSEXP);
    Rcpp::traits::input_parameter< string >::type pass(passSEXP);
    rcpp_result_gen = Rcpp::wrap(encode_ids(ids, pass));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_encode_ids(SEXP idsSEXP, SEXP passSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_encode_ids_try(idsSEXP, passSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// decode_ids
vector<string> decode_ids(vector<string> encoded_ids, string pass);
static SEXP _ACTIONet_decode_ids_try(SEXP encoded_idsSEXP, SEXP passSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< vector<string> >::type encoded_ids(encoded_idsSEXP);
    Rcpp::traits::input_parameter< string >::type pass(passSEXP);
    rcpp_result_gen = Rcpp::wrap(decode_ids(encoded_ids, pass));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_decode_ids(SEXP encoded_idsSEXP, SEXP passSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_decode_ids_try(encoded_idsSEXP, passSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_pseudo_bulk_per_cluster
mat compute_pseudo_bulk_per_cluster(sp_mat& S, arma::Col<unsigned long long> sample_assignments);
static SEXP _ACTIONet_compute_pseudo_bulk_per_cluster_try(SEXP SSEXP, SEXP sample_assignmentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::Col<unsigned long long> >::type sample_assignments(sample_assignmentsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_pseudo_bulk_per_cluster(S, sample_assignments));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_pseudo_bulk_per_cluster(SEXP SSEXP, SEXP sample_assignmentsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_pseudo_bulk_per_cluster_try(SSEXP, sample_assignmentsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_pseudo_bulk_per_cluster_full
mat compute_pseudo_bulk_per_cluster_full(mat& S, arma::Col<unsigned long long> sample_assignments);
static SEXP _ACTIONet_compute_pseudo_bulk_per_cluster_full_try(SEXP SSEXP, SEXP sample_assignmentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::Col<unsigned long long> >::type sample_assignments(sample_assignmentsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_pseudo_bulk_per_cluster_full(S, sample_assignments));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_pseudo_bulk_per_cluster_full(SEXP SSEXP, SEXP sample_assignmentsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_pseudo_bulk_per_cluster_full_try(SSEXP, sample_assignmentsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_pseudo_bulk_per_cluster_and_ind
field<mat> compute_pseudo_bulk_per_cluster_and_ind(sp_mat& S, arma::Col<unsigned long long> sample_assignments, arma::Col<unsigned long long> individuals);
static SEXP _ACTIONet_compute_pseudo_bulk_per_cluster_and_ind_try(SEXP SSEXP, SEXP sample_assignmentsSEXP, SEXP individualsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::Col<unsigned long long> >::type sample_assignments(sample_assignmentsSEXP);
    Rcpp::traits::input_parameter< arma::Col<unsigned long long> >::type individuals(individualsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_pseudo_bulk_per_cluster_and_ind(S, sample_assignments, individuals));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_pseudo_bulk_per_cluster_and_ind(SEXP SSEXP, SEXP sample_assignmentsSEXP, SEXP individualsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_pseudo_bulk_per_cluster_and_ind_try(SSEXP, sample_assignmentsSEXP, individualsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_pseudo_bulk_per_cluster_and_ind_full
field<mat> compute_pseudo_bulk_per_cluster_and_ind_full(mat& S, arma::Col<unsigned long long> sample_assignments, arma::Col<unsigned long long> individuals);
static SEXP _ACTIONet_compute_pseudo_bulk_per_cluster_and_ind_full_try(SEXP SSEXP, SEXP sample_assignmentsSEXP, SEXP individualsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::Col<unsigned long long> >::type sample_assignments(sample_assignmentsSEXP);
    Rcpp::traits::input_parameter< arma::Col<unsigned long long> >::type individuals(individualsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_pseudo_bulk_per_cluster_and_ind_full(S, sample_assignments, individuals));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_pseudo_bulk_per_cluster_and_ind_full(SEXP SSEXP, SEXP sample_assignmentsSEXP, SEXP individualsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_pseudo_bulk_per_cluster_and_ind_full_try(SSEXP, sample_assignmentsSEXP, individualsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_pseudo_bulk_per_archetype
mat compute_pseudo_bulk_per_archetype(sp_mat& S, mat& H);
static SEXP _ACTIONet_compute_pseudo_bulk_per_archetype_try(SEXP SSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< mat& >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_pseudo_bulk_per_archetype(S, H));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_pseudo_bulk_per_archetype(SEXP SSEXP, SEXP HSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_pseudo_bulk_per_archetype_try(SSEXP, HSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_pseudo_bulk_per_archetype_full
mat compute_pseudo_bulk_per_archetype_full(mat& S, mat& H);
static SEXP _ACTIONet_compute_pseudo_bulk_per_archetype_full_try(SEXP SSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< mat& >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_pseudo_bulk_per_archetype_full(S, H));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_pseudo_bulk_per_archetype_full(SEXP SSEXP, SEXP HSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_pseudo_bulk_per_archetype_full_try(SSEXP, HSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_pseudo_bulk_per_archetype_and_ind
field<mat> compute_pseudo_bulk_per_archetype_and_ind(sp_mat& S, mat& H, arma::Col<unsigned long long> individuals);
static SEXP _ACTIONet_compute_pseudo_bulk_per_archetype_and_ind_try(SEXP SSEXP, SEXP HSEXP, SEXP individualsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< mat& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::Col<unsigned long long> >::type individuals(individualsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_pseudo_bulk_per_archetype_and_ind(S, H, individuals));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_pseudo_bulk_per_archetype_and_ind(SEXP SSEXP, SEXP HSEXP, SEXP individualsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_pseudo_bulk_per_archetype_and_ind_try(SSEXP, HSEXP, individualsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_pseudo_bulk_per_archetype_and_ind_full
field<mat> compute_pseudo_bulk_per_archetype_and_ind_full(mat& S, mat& H, arma::Col<unsigned long long> individuals);
static SEXP _ACTIONet_compute_pseudo_bulk_per_archetype_and_ind_full_try(SEXP SSEXP, SEXP HSEXP, SEXP individualsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< mat& >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::Col<unsigned long long> >::type individuals(individualsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_pseudo_bulk_per_archetype_and_ind_full(S, H, individuals));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_pseudo_bulk_per_archetype_and_ind_full(SEXP SSEXP, SEXP HSEXP, SEXP individualsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_pseudo_bulk_per_archetype_and_ind_full_try(SSEXP, HSEXP, individualsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// renormalize_input_matrix
sp_mat renormalize_input_matrix(sp_mat& S, arma::Col<unsigned long long> sample_assignments);
static SEXP _ACTIONet_renormalize_input_matrix_try(SEXP SSEXP, SEXP sample_assignmentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::Col<unsigned long long> >::type sample_assignments(sample_assignmentsSEXP);
    rcpp_result_gen = Rcpp::wrap(renormalize_input_matrix(S, sample_assignments));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_renormalize_input_matrix(SEXP SSEXP, SEXP sample_assignmentsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_renormalize_input_matrix_try(SSEXP, sample_assignmentsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// renormalize_input_matrix_full
mat renormalize_input_matrix_full(mat& S, arma::Col<unsigned long long> sample_assignments);
static SEXP _ACTIONet_renormalize_input_matrix_full_try(SEXP SSEXP, SEXP sample_assignmentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::Col<unsigned long long> >::type sample_assignments(sample_assignmentsSEXP);
    rcpp_result_gen = Rcpp::wrap(renormalize_input_matrix_full(S, sample_assignments));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_renormalize_input_matrix_full(SEXP SSEXP, SEXP sample_assignmentsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_renormalize_input_matrix_full_try(SSEXP, sample_assignmentsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_archetype_feature_specificity_bin
List compute_archetype_feature_specificity_bin(sp_mat& S, mat& H);
static SEXP _ACTIONet_compute_archetype_feature_specificity_bin_try(SEXP SSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< mat& >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_archetype_feature_specificity_bin(S, H));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_archetype_feature_specificity_bin(SEXP SSEXP, SEXP HSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_archetype_feature_specificity_bin_try(SSEXP, HSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_archetype_feature_specificity
List compute_archetype_feature_specificity(sp_mat& S, mat& H);
static SEXP _ACTIONet_compute_archetype_feature_specificity_try(SEXP SSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< mat& >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_archetype_feature_specificity(S, H));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_archetype_feature_specificity(SEXP SSEXP, SEXP HSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_archetype_feature_specificity_try(SSEXP, HSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_archetype_feature_specificity_full
List compute_archetype_feature_specificity_full(mat& S, mat& H);
static SEXP _ACTIONet_compute_archetype_feature_specificity_full_try(SEXP SSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< mat& >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_archetype_feature_specificity_full(S, H));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_archetype_feature_specificity_full(SEXP SSEXP, SEXP HSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_archetype_feature_specificity_full_try(SSEXP, HSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_cluster_feature_specificity
List compute_cluster_feature_specificity(sp_mat& S, uvec sample_assignments);
static SEXP _ACTIONet_compute_cluster_feature_specificity_try(SEXP SSEXP, SEXP sample_assignmentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< uvec >::type sample_assignments(sample_assignmentsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_cluster_feature_specificity(S, sample_assignments));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_cluster_feature_specificity(SEXP SSEXP, SEXP sample_assignmentsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_cluster_feature_specificity_try(SSEXP, sample_assignmentsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_cluster_feature_specificity_full
List compute_cluster_feature_specificity_full(mat& S, uvec sample_assignments);
static SEXP _ACTIONet_compute_cluster_feature_specificity_full_try(SEXP SSEXP, SEXP sample_assignmentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< uvec >::type sample_assignments(sample_assignmentsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_cluster_feature_specificity_full(S, sample_assignments));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_cluster_feature_specificity_full(SEXP SSEXP, SEXP sample_assignmentsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_cluster_feature_specificity_full_try(SSEXP, sample_assignmentsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_core_number
uvec compute_core_number(sp_mat& G);
static SEXP _ACTIONet_compute_core_number_try(SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_core_number(G));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_core_number(SEXP GSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_core_number_try(GSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_archetype_core_centrality
vec compute_archetype_core_centrality(sp_mat& G, uvec sample_assignments);
static SEXP _ACTIONet_compute_archetype_core_centrality_try(SEXP GSEXP, SEXP sample_assignmentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< uvec >::type sample_assignments(sample_assignmentsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_archetype_core_centrality(G, sample_assignments));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_archetype_core_centrality(SEXP GSEXP, SEXP sample_assignmentsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_archetype_core_centrality_try(GSEXP, sample_assignmentsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_network_diffusion
mat compute_network_diffusion(sp_mat& G, sp_mat& X0, int thread_no, double alpha, int max_it);
static SEXP _ACTIONet_compute_network_diffusion_try(SEXP GSEXP, SEXP X0SEXP, SEXP thread_noSEXP, SEXP alphaSEXP, SEXP max_itSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< sp_mat& >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_network_diffusion(G, X0, thread_no, alpha, max_it));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_network_diffusion(SEXP GSEXP, SEXP X0SEXP, SEXP thread_noSEXP, SEXP alphaSEXP, SEXP max_itSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_network_diffusion_try(GSEXP, X0SEXP, thread_noSEXP, alphaSEXP, max_itSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_network_diffusion_fast
mat compute_network_diffusion_fast(sp_mat& G, sp_mat& X0, int thread_no, double alpha, int max_it);
static SEXP _ACTIONet_compute_network_diffusion_fast_try(SEXP GSEXP, SEXP X0SEXP, SEXP thread_noSEXP, SEXP alphaSEXP, SEXP max_itSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< sp_mat& >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_network_diffusion_fast(G, X0, thread_no, alpha, max_it));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_network_diffusion_fast(SEXP GSEXP, SEXP X0SEXP, SEXP thread_noSEXP, SEXP alphaSEXP, SEXP max_itSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_network_diffusion_fast_try(GSEXP, X0SEXP, thread_noSEXP, alphaSEXP, max_itSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_network_diffusion_direct
mat compute_network_diffusion_direct(sp_mat& G, sp_mat& X0, int thread_no, double alpha);
static SEXP _ACTIONet_compute_network_diffusion_direct_try(SEXP GSEXP, SEXP X0SEXP, SEXP thread_noSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< sp_mat& >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_network_diffusion_direct(G, X0, thread_no, alpha));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_network_diffusion_direct(SEXP GSEXP, SEXP X0SEXP, SEXP thread_noSEXP, SEXP alphaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_network_diffusion_direct_try(GSEXP, X0SEXP, thread_noSEXP, alphaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_sparse_network_diffusion
sp_mat compute_sparse_network_diffusion(sp_mat& G, sp_mat& X0, double alpha, double rho, double epsilon, int max_iter);
static SEXP _ACTIONet_compute_sparse_network_diffusion_try(SEXP GSEXP, SEXP X0SEXP, SEXP alphaSEXP, SEXP rhoSEXP, SEXP epsilonSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< sp_mat& >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_sparse_network_diffusion(G, X0, alpha, rho, epsilon, max_iter));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_sparse_network_diffusion(SEXP GSEXP, SEXP X0SEXP, SEXP alphaSEXP, SEXP rhoSEXP, SEXP epsilonSEXP, SEXP max_iterSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_sparse_network_diffusion_try(GSEXP, X0SEXP, alphaSEXP, rhoSEXP, epsilonSEXP, max_iterSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// assess_enrichment
List assess_enrichment(mat& scores, sp_mat& associations, int thread_no);
static SEXP _ACTIONet_assess_enrichment_try(SEXP scoresSEXP, SEXP associationsSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< sp_mat& >::type associations(associationsSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(assess_enrichment(scores, associations, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_assess_enrichment(SEXP scoresSEXP, SEXP associationsSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_assess_enrichment_try(scoresSEXP, associationsSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// NetDBSCAN
vec NetDBSCAN(SEXP G, int minPts, double eps, double alpha);
static SEXP _ACTIONet_NetDBSCAN_try(SEXP GSEXP, SEXP minPtsSEXP, SEXP epsSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type minPts(minPtsSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(NetDBSCAN(G, minPts, eps, alpha));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_NetDBSCAN(SEXP GSEXP, SEXP minPtsSEXP, SEXP epsSEXP, SEXP alphaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_NetDBSCAN_try(GSEXP, minPtsSEXP, epsSEXP, alphaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// run_HDBSCAN
List run_HDBSCAN(mat& X, int minPoints, int minClusterSize);
static SEXP _ACTIONet_run_HDBSCAN_try(SEXP XSEXP, SEXP minPointsSEXP, SEXP minClusterSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type minPoints(minPointsSEXP);
    Rcpp::traits::input_parameter< int >::type minClusterSize(minClusterSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(run_HDBSCAN(X, minPoints, minClusterSize));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_run_HDBSCAN(SEXP XSEXP, SEXP minPointsSEXP, SEXP minClusterSizeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_run_HDBSCAN_try(XSEXP, minPointsSEXP, minClusterSizeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// MWM_hungarian
mat MWM_hungarian(mat& G);
static SEXP _ACTIONet_MWM_hungarian_try(SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(MWM_hungarian(G));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_MWM_hungarian(SEXP GSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_MWM_hungarian_try(GSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// signed_cluster
vec signed_cluster(sp_mat A, double resolution_parameter, Nullable<IntegerVector> initial_clusters_, int seed);
static SEXP _ACTIONet_signed_cluster_try(SEXP ASEXP, SEXP resolution_parameterSEXP, SEXP initial_clusters_SEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type resolution_parameter(resolution_parameterSEXP);
    Rcpp::traits::input_parameter< Nullable<IntegerVector> >::type initial_clusters_(initial_clusters_SEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(signed_cluster(A, resolution_parameter, initial_clusters_, seed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_signed_cluster(SEXP ASEXP, SEXP resolution_parameterSEXP, SEXP initial_clusters_SEXP, SEXP seedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_signed_cluster_try(ASEXP, resolution_parameterSEXP, initial_clusters_SEXP, seedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// unsigned_cluster_batch
mat unsigned_cluster_batch(sp_mat A, vec resolutions, Nullable<IntegerVector> initial_clusters_, int seed);
static SEXP _ACTIONet_unsigned_cluster_batch_try(SEXP ASEXP, SEXP resolutionsSEXP, SEXP initial_clusters_SEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< vec >::type resolutions(resolutionsSEXP);
    Rcpp::traits::input_parameter< Nullable<IntegerVector> >::type initial_clusters_(initial_clusters_SEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(unsigned_cluster_batch(A, resolutions, initial_clusters_, seed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_unsigned_cluster_batch(SEXP ASEXP, SEXP resolutionsSEXP, SEXP initial_clusters_SEXP, SEXP seedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_unsigned_cluster_batch_try(ASEXP, resolutionsSEXP, initial_clusters_SEXP, seedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// unsigned_cluster
vec unsigned_cluster(sp_mat A, double resolution_parameter, Nullable<IntegerVector> initial_clusters_, int seed);
static SEXP _ACTIONet_unsigned_cluster_try(SEXP ASEXP, SEXP resolution_parameterSEXP, SEXP initial_clusters_SEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type resolution_parameter(resolution_parameterSEXP);
    Rcpp::traits::input_parameter< Nullable<IntegerVector> >::type initial_clusters_(initial_clusters_SEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(unsigned_cluster(A, resolution_parameter, initial_clusters_, seed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_unsigned_cluster(SEXP ASEXP, SEXP resolution_parameterSEXP, SEXP initial_clusters_SEXP, SEXP seedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_unsigned_cluster_try(ASEXP, resolution_parameterSEXP, initial_clusters_SEXP, seedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// Prune_PageRank
mat Prune_PageRank(mat& U, double density);
static SEXP _ACTIONet_Prune_PageRank_try(SEXP USEXP, SEXP densitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< double >::type density(densitySEXP);
    rcpp_result_gen = Rcpp::wrap(Prune_PageRank(U, density));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_Prune_PageRank(SEXP USEXP, SEXP densitySEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_Prune_PageRank_try(USEXP, densitySEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// transform_layout
List transform_layout(sp_mat& W, mat coor2D, mat coor3D, mat colRGB, int compactness_level, unsigned int n_epochs, int thread_no, int seed);
static SEXP _ACTIONet_transform_layout_try(SEXP WSEXP, SEXP coor2DSEXP, SEXP coor3DSEXP, SEXP colRGBSEXP, SEXP compactness_levelSEXP, SEXP n_epochsSEXP, SEXP thread_noSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< mat >::type coor2D(coor2DSEXP);
    Rcpp::traits::input_parameter< mat >::type coor3D(coor3DSEXP);
    Rcpp::traits::input_parameter< mat >::type colRGB(colRGBSEXP);
    Rcpp::traits::input_parameter< int >::type compactness_level(compactness_levelSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n_epochs(n_epochsSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(transform_layout(W, coor2D, coor3D, colRGB, compactness_level, n_epochs, thread_no, seed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_transform_layout(SEXP WSEXP, SEXP coor2DSEXP, SEXP coor3DSEXP, SEXP colRGBSEXP, SEXP compactness_levelSEXP, SEXP n_epochsSEXP, SEXP thread_noSEXP, SEXP seedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_transform_layout_try(WSEXP, coor2DSEXP, coor3DSEXP, colRGBSEXP, compactness_levelSEXP, n_epochsSEXP, thread_noSEXP, seedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sgd2_layout_weighted
mat sgd2_layout_weighted(sp_mat& G, mat S_r, int t_max, double eps, int seed);
static SEXP _ACTIONet_sgd2_layout_weighted_try(SEXP GSEXP, SEXP S_rSEXP, SEXP t_maxSEXP, SEXP epsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< mat >::type S_r(S_rSEXP);
    Rcpp::traits::input_parameter< int >::type t_max(t_maxSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(sgd2_layout_weighted(G, S_r, t_max, eps, seed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_sgd2_layout_weighted(SEXP GSEXP, SEXP S_rSEXP, SEXP t_maxSEXP, SEXP epsSEXP, SEXP seedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_sgd2_layout_weighted_try(GSEXP, S_rSEXP, t_maxSEXP, epsSEXP, seedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sgd2_layout_weighted_convergent
mat sgd2_layout_weighted_convergent(sp_mat& G, mat S_r, int t_max, double eps, double delta, int t_maxmax, int seed);
static SEXP _ACTIONet_sgd2_layout_weighted_convergent_try(SEXP GSEXP, SEXP S_rSEXP, SEXP t_maxSEXP, SEXP epsSEXP, SEXP deltaSEXP, SEXP t_maxmaxSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< mat >::type S_r(S_rSEXP);
    Rcpp::traits::input_parameter< int >::type t_max(t_maxSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type t_maxmax(t_maxmaxSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(sgd2_layout_weighted_convergent(G, S_r, t_max, eps, delta, t_maxmax, seed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_sgd2_layout_weighted_convergent(SEXP GSEXP, SEXP S_rSEXP, SEXP t_maxSEXP, SEXP epsSEXP, SEXP deltaSEXP, SEXP t_maxmaxSEXP, SEXP seedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_sgd2_layout_weighted_convergent_try(GSEXP, S_rSEXP, t_maxSEXP, epsSEXP, deltaSEXP, t_maxmaxSEXP, seedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// sgd2_layout_sparse_weighted
mat sgd2_layout_sparse_weighted(sp_mat& G, mat S_r, int p, int t_max, double eps, int seed);
static SEXP _ACTIONet_sgd2_layout_sparse_weighted_try(SEXP GSEXP, SEXP S_rSEXP, SEXP pSEXP, SEXP t_maxSEXP, SEXP epsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< mat >::type S_r(S_rSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type t_max(t_maxSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(sgd2_layout_sparse_weighted(G, S_r, p, t_max, eps, seed));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_sgd2_layout_sparse_weighted(SEXP GSEXP, SEXP S_rSEXP, SEXP pSEXP, SEXP t_maxSEXP, SEXP epsSEXP, SEXP seedSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_sgd2_layout_sparse_weighted_try(GSEXP, S_rSEXP, pSEXP, t_maxSEXP, epsSEXP, seedSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_AA_coreset
List compute_AA_coreset(sp_mat& S, int m);
static SEXP _ACTIONet_compute_AA_coreset_try(SEXP SSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_AA_coreset(S, m));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_AA_coreset(SEXP SSEXP, SEXP mSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_AA_coreset_try(SSEXP, mSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// SVD2ACTIONred
List SVD2ACTIONred(sp_mat& S, mat u, vec d, mat v);
static SEXP _ACTIONet_SVD2ACTIONred_try(SEXP SSEXP, SEXP uSEXP, SEXP dSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< mat >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(SVD2ACTIONred(S, u, d, v));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_SVD2ACTIONred(SEXP SSEXP, SEXP uSEXP, SEXP dSEXP, SEXP vSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_SVD2ACTIONred_try(SSEXP, uSEXP, dSEXP, vSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// SVD2ACTIONred_full
List SVD2ACTIONred_full(mat& S, mat u, vec d, mat v);
static SEXP _ACTIONet_SVD2ACTIONred_full_try(SEXP SSEXP, SEXP uSEXP, SEXP dSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< mat >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(SVD2ACTIONred_full(S, u, d, v));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_SVD2ACTIONred_full(SEXP SSEXP, SEXP uSEXP, SEXP dSEXP, SEXP vSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_SVD2ACTIONred_full_try(SSEXP, uSEXP, dSEXP, vSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// PCA2ACTIONred
List PCA2ACTIONred(sp_mat& S, mat x, vec sdev, mat rotation);
static SEXP _ACTIONet_PCA2ACTIONred_try(SEXP SSEXP, SEXP xSEXP, SEXP sdevSEXP, SEXP rotationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec >::type sdev(sdevSEXP);
    Rcpp::traits::input_parameter< mat >::type rotation(rotationSEXP);
    rcpp_result_gen = Rcpp::wrap(PCA2ACTIONred(S, x, sdev, rotation));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_PCA2ACTIONred(SEXP SSEXP, SEXP xSEXP, SEXP sdevSEXP, SEXP rotationSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_PCA2ACTIONred_try(SSEXP, xSEXP, sdevSEXP, rotationSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// PCA2ACTIONred_full
List PCA2ACTIONred_full(mat& S, mat x, vec sdev, mat rotation);
static SEXP _ACTIONet_PCA2ACTIONred_full_try(SEXP SSEXP, SEXP xSEXP, SEXP sdevSEXP, SEXP rotationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec >::type sdev(sdevSEXP);
    Rcpp::traits::input_parameter< mat >::type rotation(rotationSEXP);
    rcpp_result_gen = Rcpp::wrap(PCA2ACTIONred_full(S, x, sdev, rotation));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_PCA2ACTIONred_full(SEXP SSEXP, SEXP xSEXP, SEXP sdevSEXP, SEXP rotationSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_PCA2ACTIONred_full_try(SSEXP, xSEXP, sdevSEXP, rotationSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// PCA2SVD
List PCA2SVD(sp_mat& S, mat x, vec sdev, mat rotation);
static SEXP _ACTIONet_PCA2SVD_try(SEXP SSEXP, SEXP xSEXP, SEXP sdevSEXP, SEXP rotationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec >::type sdev(sdevSEXP);
    Rcpp::traits::input_parameter< mat >::type rotation(rotationSEXP);
    rcpp_result_gen = Rcpp::wrap(PCA2SVD(S, x, sdev, rotation));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_PCA2SVD(SEXP SSEXP, SEXP xSEXP, SEXP sdevSEXP, SEXP rotationSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_PCA2SVD_try(SSEXP, xSEXP, sdevSEXP, rotationSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// PCA2SVD_full
List PCA2SVD_full(mat& S, mat x, vec sdev, mat rotation);
static SEXP _ACTIONet_PCA2SVD_full_try(SEXP SSEXP, SEXP xSEXP, SEXP sdevSEXP, SEXP rotationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec >::type sdev(sdevSEXP);
    Rcpp::traits::input_parameter< mat >::type rotation(rotationSEXP);
    rcpp_result_gen = Rcpp::wrap(PCA2SVD_full(S, x, sdev, rotation));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_PCA2SVD_full(SEXP SSEXP, SEXP xSEXP, SEXP sdevSEXP, SEXP rotationSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_PCA2SVD_full_try(SSEXP, xSEXP, sdevSEXP, rotationSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// SVD2PCA
List SVD2PCA(sp_mat& S, mat u, vec d, mat v);
static SEXP _ACTIONet_SVD2PCA_try(SEXP SSEXP, SEXP uSEXP, SEXP dSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< mat >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(SVD2PCA(S, u, d, v));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_SVD2PCA(SEXP SSEXP, SEXP uSEXP, SEXP dSEXP, SEXP vSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_SVD2PCA_try(SSEXP, uSEXP, dSEXP, vSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// SVD2PCA_full
List SVD2PCA_full(mat& S, mat u, vec d, mat v);
static SEXP _ACTIONet_SVD2PCA_full_try(SEXP SSEXP, SEXP uSEXP, SEXP dSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< mat >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(SVD2PCA_full(S, u, d, v));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_SVD2PCA_full(SEXP SSEXP, SEXP uSEXP, SEXP dSEXP, SEXP vSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_SVD2PCA_full_try(SSEXP, uSEXP, dSEXP, vSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// perturbedSVD
List perturbedSVD(mat u, vec d, mat v, mat A, mat B);
static SEXP _ACTIONet_perturbedSVD_try(SEXP uSEXP, SEXP dSEXP, SEXP vSEXP, SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat >::type u(uSEXP);
    Rcpp::traits::input_parameter< vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< mat >::type v(vSEXP);
    Rcpp::traits::input_parameter< mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(perturbedSVD(u, d, v, A, B));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_perturbedSVD(SEXP uSEXP, SEXP dSEXP, SEXP vSEXP, SEXP ASEXP, SEXP BSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_perturbedSVD_try(uSEXP, dSEXP, vSEXP, ASEXP, BSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// computeFullSim
mat computeFullSim(mat& H, int thread_no);
static SEXP _ACTIONet_computeFullSim_try(SEXP HSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type H(HSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(computeFullSim(H, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_computeFullSim(SEXP HSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_computeFullSim_try(HSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// csr_sort_indices_inplace
void csr_sort_indices_inplace(IntegerVector& Ap, IntegerVector& Aj, NumericVector& Ax);
static SEXP _ACTIONet_csr_sort_indices_inplace_try(SEXP ApSEXP, SEXP AjSEXP, SEXP AxSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< IntegerVector& >::type Ap(ApSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type Aj(AjSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type Ax(AxSEXP);
    csr_sort_indices_inplace(Ap, Aj, Ax);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_csr_sort_indices_inplace(SEXP ApSEXP, SEXP AjSEXP, SEXP AxSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_csr_sort_indices_inplace_try(ApSEXP, AjSEXP, AxSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// csc_sort_indices_inplace
void csc_sort_indices_inplace(IntegerVector& Ap, IntegerVector& Ai, NumericVector& Ax);
static SEXP _ACTIONet_csc_sort_indices_inplace_try(SEXP ApSEXP, SEXP AiSEXP, SEXP AxSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< IntegerVector& >::type Ap(ApSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type Ai(AiSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type Ax(AxSEXP);
    csc_sort_indices_inplace(Ap, Ai, Ax);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_csc_sort_indices_inplace(SEXP ApSEXP, SEXP AiSEXP, SEXP AxSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_csc_sort_indices_inplace_try(ApSEXP, AiSEXP, AxSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// run_subACTION
List run_subACTION(mat& S_r, mat& W_parent, mat& H_parent, int kk, int k_min, int k_max, int thread_no, int max_it, double min_delta);
static SEXP _ACTIONet_run_subACTION_try(SEXP S_rSEXP, SEXP W_parentSEXP, SEXP H_parentSEXP, SEXP kkSEXP, SEXP k_minSEXP, SEXP k_maxSEXP, SEXP thread_noSEXP, SEXP max_itSEXP, SEXP min_deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type S_r(S_rSEXP);
    Rcpp::traits::input_parameter< mat& >::type W_parent(W_parentSEXP);
    Rcpp::traits::input_parameter< mat& >::type H_parent(H_parentSEXP);
    Rcpp::traits::input_parameter< int >::type kk(kkSEXP);
    Rcpp::traits::input_parameter< int >::type k_min(k_minSEXP);
    Rcpp::traits::input_parameter< int >::type k_max(k_maxSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< double >::type min_delta(min_deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(run_subACTION(S_r, W_parent, H_parent, kk, k_min, k_max, thread_no, max_it, min_delta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_run_subACTION(SEXP S_rSEXP, SEXP W_parentSEXP, SEXP H_parentSEXP, SEXP kkSEXP, SEXP k_minSEXP, SEXP k_maxSEXP, SEXP thread_noSEXP, SEXP max_itSEXP, SEXP min_deltaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_run_subACTION_try(S_rSEXP, W_parentSEXP, H_parentSEXP, kkSEXP, k_minSEXP, k_maxSEXP, thread_noSEXP, max_itSEXP, min_deltaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// deflate_reduction
List deflate_reduction(mat& old_S_r, mat& old_V, mat& old_A, mat& old_B, vec& old_sigma, mat& A, mat& B);
static SEXP _ACTIONet_deflate_reduction_try(SEXP old_S_rSEXP, SEXP old_VSEXP, SEXP old_ASEXP, SEXP old_BSEXP, SEXP old_sigmaSEXP, SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type old_S_r(old_S_rSEXP);
    Rcpp::traits::input_parameter< mat& >::type old_V(old_VSEXP);
    Rcpp::traits::input_parameter< mat& >::type old_A(old_ASEXP);
    Rcpp::traits::input_parameter< mat& >::type old_B(old_BSEXP);
    Rcpp::traits::input_parameter< vec& >::type old_sigma(old_sigmaSEXP);
    Rcpp::traits::input_parameter< mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< mat& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(deflate_reduction(old_S_r, old_V, old_A, old_B, old_sigma, A, B));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_deflate_reduction(SEXP old_S_rSEXP, SEXP old_VSEXP, SEXP old_ASEXP, SEXP old_BSEXP, SEXP old_sigmaSEXP, SEXP ASEXP, SEXP BSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_deflate_reduction_try(old_S_rSEXP, old_VSEXP, old_ASEXP, old_BSEXP, old_sigmaSEXP, ASEXP, BSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// orthogonalize_batch_effect
List orthogonalize_batch_effect(sp_mat& S, mat& old_S_r, mat& old_V, mat& old_A, mat& old_B, vec& old_sigma, mat& design);
static SEXP _ACTIONet_orthogonalize_batch_effect_try(SEXP SSEXP, SEXP old_S_rSEXP, SEXP old_VSEXP, SEXP old_ASEXP, SEXP old_BSEXP, SEXP old_sigmaSEXP, SEXP designSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< mat& >::type old_S_r(old_S_rSEXP);
    Rcpp::traits::input_parameter< mat& >::type old_V(old_VSEXP);
    Rcpp::traits::input_parameter< mat& >::type old_A(old_ASEXP);
    Rcpp::traits::input_parameter< mat& >::type old_B(old_BSEXP);
    Rcpp::traits::input_parameter< vec& >::type old_sigma(old_sigmaSEXP);
    Rcpp::traits::input_parameter< mat& >::type design(designSEXP);
    rcpp_result_gen = Rcpp::wrap(orthogonalize_batch_effect(S, old_S_r, old_V, old_A, old_B, old_sigma, design));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_orthogonalize_batch_effect(SEXP SSEXP, SEXP old_S_rSEXP, SEXP old_VSEXP, SEXP old_ASEXP, SEXP old_BSEXP, SEXP old_sigmaSEXP, SEXP designSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_orthogonalize_batch_effect_try(SSEXP, old_S_rSEXP, old_VSEXP, old_ASEXP, old_BSEXP, old_sigmaSEXP, designSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// orthogonalize_batch_effect_full
List orthogonalize_batch_effect_full(mat& S, mat& old_S_r, mat& old_V, mat& old_A, mat& old_B, vec& old_sigma, mat& design);
static SEXP _ACTIONet_orthogonalize_batch_effect_full_try(SEXP SSEXP, SEXP old_S_rSEXP, SEXP old_VSEXP, SEXP old_ASEXP, SEXP old_BSEXP, SEXP old_sigmaSEXP, SEXP designSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< mat& >::type old_S_r(old_S_rSEXP);
    Rcpp::traits::input_parameter< mat& >::type old_V(old_VSEXP);
    Rcpp::traits::input_parameter< mat& >::type old_A(old_ASEXP);
    Rcpp::traits::input_parameter< mat& >::type old_B(old_BSEXP);
    Rcpp::traits::input_parameter< vec& >::type old_sigma(old_sigmaSEXP);
    Rcpp::traits::input_parameter< mat& >::type design(designSEXP);
    rcpp_result_gen = Rcpp::wrap(orthogonalize_batch_effect_full(S, old_S_r, old_V, old_A, old_B, old_sigma, design));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_orthogonalize_batch_effect_full(SEXP SSEXP, SEXP old_S_rSEXP, SEXP old_VSEXP, SEXP old_ASEXP, SEXP old_BSEXP, SEXP old_sigmaSEXP, SEXP designSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_orthogonalize_batch_effect_full_try(SSEXP, old_S_rSEXP, old_VSEXP, old_ASEXP, old_BSEXP, old_sigmaSEXP, designSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// orthogonalize_basal
List orthogonalize_basal(sp_mat& S, mat& old_S_r, mat& old_V, mat& old_A, mat& old_B, vec& old_sigma, mat& basal);
static SEXP _ACTIONet_orthogonalize_basal_try(SEXP SSEXP, SEXP old_S_rSEXP, SEXP old_VSEXP, SEXP old_ASEXP, SEXP old_BSEXP, SEXP old_sigmaSEXP, SEXP basalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< mat& >::type old_S_r(old_S_rSEXP);
    Rcpp::traits::input_parameter< mat& >::type old_V(old_VSEXP);
    Rcpp::traits::input_parameter< mat& >::type old_A(old_ASEXP);
    Rcpp::traits::input_parameter< mat& >::type old_B(old_BSEXP);
    Rcpp::traits::input_parameter< vec& >::type old_sigma(old_sigmaSEXP);
    Rcpp::traits::input_parameter< mat& >::type basal(basalSEXP);
    rcpp_result_gen = Rcpp::wrap(orthogonalize_basal(S, old_S_r, old_V, old_A, old_B, old_sigma, basal));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_orthogonalize_basal(SEXP SSEXP, SEXP old_S_rSEXP, SEXP old_VSEXP, SEXP old_ASEXP, SEXP old_BSEXP, SEXP old_sigmaSEXP, SEXP basalSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_orthogonalize_basal_try(SSEXP, old_S_rSEXP, old_VSEXP, old_ASEXP, old_BSEXP, old_sigmaSEXP, basalSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// orthogonalize_basal_full
List orthogonalize_basal_full(mat& S, mat& old_S_r, mat& old_V, mat& old_A, mat& old_B, vec& old_sigma, mat& basal);
static SEXP _ACTIONet_orthogonalize_basal_full_try(SEXP SSEXP, SEXP old_S_rSEXP, SEXP old_VSEXP, SEXP old_ASEXP, SEXP old_BSEXP, SEXP old_sigmaSEXP, SEXP basalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< mat& >::type old_S_r(old_S_rSEXP);
    Rcpp::traits::input_parameter< mat& >::type old_V(old_VSEXP);
    Rcpp::traits::input_parameter< mat& >::type old_A(old_ASEXP);
    Rcpp::traits::input_parameter< mat& >::type old_B(old_BSEXP);
    Rcpp::traits::input_parameter< vec& >::type old_sigma(old_sigmaSEXP);
    Rcpp::traits::input_parameter< mat& >::type basal(basalSEXP);
    rcpp_result_gen = Rcpp::wrap(orthogonalize_basal_full(S, old_S_r, old_V, old_A, old_B, old_sigma, basal));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_orthogonalize_basal_full(SEXP SSEXP, SEXP old_S_rSEXP, SEXP old_VSEXP, SEXP old_ASEXP, SEXP old_BSEXP, SEXP old_sigmaSEXP, SEXP basalSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_orthogonalize_basal_full_try(SSEXP, old_S_rSEXP, old_VSEXP, old_ASEXP, old_BSEXP, old_sigmaSEXP, basalSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// MWM_rank1
umat MWM_rank1(vec u, vec v, double u_threshold, double v_threshold);
static SEXP _ACTIONet_MWM_rank1_try(SEXP uSEXP, SEXP vSEXP, SEXP u_thresholdSEXP, SEXP v_thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< vec >::type u(uSEXP);
    Rcpp::traits::input_parameter< vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type u_threshold(u_thresholdSEXP);
    Rcpp::traits::input_parameter< double >::type v_threshold(v_thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(MWM_rank1(u, v, u_threshold, v_threshold));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_MWM_rank1(SEXP uSEXP, SEXP vSEXP, SEXP u_thresholdSEXP, SEXP v_thresholdSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_MWM_rank1_try(uSEXP, vSEXP, u_thresholdSEXP, v_thresholdSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// NetEnh
mat NetEnh(mat A);
static SEXP _ACTIONet_NetEnh_try(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(NetEnh(A));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_NetEnh(SEXP ASEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_NetEnh_try(ASEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// run_LPA
vec run_LPA(sp_mat& G, vec labels, double lambda, int iters, double sig_threshold, Nullable<IntegerVector> fixed_labels_);
static SEXP _ACTIONet_run_LPA_try(SEXP GSEXP, SEXP labelsSEXP, SEXP lambdaSEXP, SEXP itersSEXP, SEXP sig_thresholdSEXP, SEXP fixed_labels_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< vec >::type labels(labelsSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type iters(itersSEXP);
    Rcpp::traits::input_parameter< double >::type sig_threshold(sig_thresholdSEXP);
    Rcpp::traits::input_parameter< Nullable<IntegerVector> >::type fixed_labels_(fixed_labels_SEXP);
    rcpp_result_gen = Rcpp::wrap(run_LPA(G, labels, lambda, iters, sig_threshold, fixed_labels_));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_run_LPA(SEXP GSEXP, SEXP labelsSEXP, SEXP lambdaSEXP, SEXP itersSEXP, SEXP sig_thresholdSEXP, SEXP fixed_labels_SEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_run_LPA_try(GSEXP, labelsSEXP, lambdaSEXP, itersSEXP, sig_thresholdSEXP, fixed_labels_SEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_marker_aggregate_stats
mat compute_marker_aggregate_stats(sp_mat& G, sp_mat& S, sp_mat& marker_mat, double alpha, int max_it, int thread_no, bool ignore_baseline_expression);
static SEXP _ACTIONet_compute_marker_aggregate_stats_try(SEXP GSEXP, SEXP SSEXP, SEXP marker_matSEXP, SEXP alphaSEXP, SEXP max_itSEXP, SEXP thread_noSEXP, SEXP ignore_baseline_expressionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< sp_mat& >::type marker_mat(marker_matSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    Rcpp::traits::input_parameter< bool >::type ignore_baseline_expression(ignore_baseline_expressionSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_marker_aggregate_stats(G, S, marker_mat, alpha, max_it, thread_no, ignore_baseline_expression));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_marker_aggregate_stats(SEXP GSEXP, SEXP SSEXP, SEXP marker_matSEXP, SEXP alphaSEXP, SEXP max_itSEXP, SEXP thread_noSEXP, SEXP ignore_baseline_expressionSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_marker_aggregate_stats_try(GSEXP, SSEXP, marker_matSEXP, alphaSEXP, max_itSEXP, thread_noSEXP, ignore_baseline_expressionSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// run_AA_with_batch_correction
List run_AA_with_batch_correction(mat& Z, mat& W0, vec batch, int max_it, int max_correction_rounds, double lambda, double min_delta);
static SEXP _ACTIONet_run_AA_with_batch_correction_try(SEXP ZSEXP, SEXP W0SEXP, SEXP batchSEXP, SEXP max_itSEXP, SEXP max_correction_roundsSEXP, SEXP lambdaSEXP, SEXP min_deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< mat& >::type W0(W0SEXP);
    Rcpp::traits::input_parameter< vec >::type batch(batchSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< int >::type max_correction_rounds(max_correction_roundsSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type min_delta(min_deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(run_AA_with_batch_correction(Z, W0, batch, max_it, max_correction_rounds, lambda, min_delta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_run_AA_with_batch_correction(SEXP ZSEXP, SEXP W0SEXP, SEXP batchSEXP, SEXP max_itSEXP, SEXP max_correction_roundsSEXP, SEXP lambdaSEXP, SEXP min_deltaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_run_AA_with_batch_correction_try(ZSEXP, W0SEXP, batchSEXP, max_itSEXP, max_correction_roundsSEXP, lambdaSEXP, min_deltaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// run_ACTION_with_batch_correction
List run_ACTION_with_batch_correction(mat& S_r, vec batch, int k_min, int k_max, int thread_no, int max_it, int max_correction_rounds, double lambda, double min_delta);
static SEXP _ACTIONet_run_ACTION_with_batch_correction_try(SEXP S_rSEXP, SEXP batchSEXP, SEXP k_minSEXP, SEXP k_maxSEXP, SEXP thread_noSEXP, SEXP max_itSEXP, SEXP max_correction_roundsSEXP, SEXP lambdaSEXP, SEXP min_deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< mat& >::type S_r(S_rSEXP);
    Rcpp::traits::input_parameter< vec >::type batch(batchSEXP);
    Rcpp::traits::input_parameter< int >::type k_min(k_minSEXP);
    Rcpp::traits::input_parameter< int >::type k_max(k_maxSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< int >::type max_correction_rounds(max_correction_roundsSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type min_delta(min_deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(run_ACTION_with_batch_correction(S_r, batch, k_min, k_max, thread_no, max_it, max_correction_rounds, lambda, min_delta));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_run_ACTION_with_batch_correction(SEXP S_rSEXP, SEXP batchSEXP, SEXP k_minSEXP, SEXP k_maxSEXP, SEXP thread_noSEXP, SEXP max_itSEXP, SEXP max_correction_roundsSEXP, SEXP lambdaSEXP, SEXP min_deltaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_run_ACTION_with_batch_correction_try(S_rSEXP, batchSEXP, k_minSEXP, k_maxSEXP, thread_noSEXP, max_itSEXP, max_correction_roundsSEXP, lambdaSEXP, min_deltaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_marker_aggregate_stats_basic_sum
mat compute_marker_aggregate_stats_basic_sum(sp_mat& S, sp_mat& marker_mat);
static SEXP _ACTIONet_compute_marker_aggregate_stats_basic_sum_try(SEXP SSEXP, SEXP marker_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< sp_mat& >::type marker_mat(marker_matSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_marker_aggregate_stats_basic_sum(S, marker_mat));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_marker_aggregate_stats_basic_sum(SEXP SSEXP, SEXP marker_matSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_marker_aggregate_stats_basic_sum_try(SSEXP, marker_matSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_marker_aggregate_stats_basic_sum_perm
mat compute_marker_aggregate_stats_basic_sum_perm(sp_mat& S, sp_mat& marker_mat, int perm_no, int thread_no);
static SEXP _ACTIONet_compute_marker_aggregate_stats_basic_sum_perm_try(SEXP SSEXP, SEXP marker_matSEXP, SEXP perm_noSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< sp_mat& >::type marker_mat(marker_matSEXP);
    Rcpp::traits::input_parameter< int >::type perm_no(perm_noSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_marker_aggregate_stats_basic_sum_perm(S, marker_mat, perm_no, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_marker_aggregate_stats_basic_sum_perm(SEXP SSEXP, SEXP marker_matSEXP, SEXP perm_noSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_marker_aggregate_stats_basic_sum_perm_try(SSEXP, marker_matSEXP, perm_noSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_marker_aggregate_stats_basic_sum_perm_smoothed
mat compute_marker_aggregate_stats_basic_sum_perm_smoothed(sp_mat& G, sp_mat& S, sp_mat& marker_mat, double alpha, int max_it, int perm_no, int thread_no);
static SEXP _ACTIONet_compute_marker_aggregate_stats_basic_sum_perm_smoothed_try(SEXP GSEXP, SEXP SSEXP, SEXP marker_matSEXP, SEXP alphaSEXP, SEXP max_itSEXP, SEXP perm_noSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< sp_mat& >::type marker_mat(marker_matSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< int >::type perm_no(perm_noSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_marker_aggregate_stats_basic_sum_perm_smoothed(G, S, marker_mat, alpha, max_it, perm_no, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_marker_aggregate_stats_basic_sum_perm_smoothed(SEXP GSEXP, SEXP SSEXP, SEXP marker_matSEXP, SEXP alphaSEXP, SEXP max_itSEXP, SEXP perm_noSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_marker_aggregate_stats_basic_sum_perm_smoothed_try(GSEXP, SSEXP, marker_matSEXP, alphaSEXP, max_itSEXP, perm_noSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_marker_aggregate_stats_basic_sum_perm_smoothed_v2
mat compute_marker_aggregate_stats_basic_sum_perm_smoothed_v2(sp_mat& G, sp_mat& S, sp_mat& marker_mat, double alpha, int max_it, int perm_no, int thread_no);
static SEXP _ACTIONet_compute_marker_aggregate_stats_basic_sum_perm_smoothed_v2_try(SEXP GSEXP, SEXP SSEXP, SEXP marker_matSEXP, SEXP alphaSEXP, SEXP max_itSEXP, SEXP perm_noSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< sp_mat& >::type marker_mat(marker_matSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< int >::type perm_no(perm_noSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_marker_aggregate_stats_basic_sum_perm_smoothed_v2(G, S, marker_mat, alpha, max_it, perm_no, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_marker_aggregate_stats_basic_sum_perm_smoothed_v2(SEXP GSEXP, SEXP SSEXP, SEXP marker_matSEXP, SEXP alphaSEXP, SEXP max_itSEXP, SEXP perm_noSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_marker_aggregate_stats_basic_sum_perm_smoothed_v2_try(GSEXP, SSEXP, marker_matSEXP, alphaSEXP, max_itSEXP, perm_noSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_marker_aggregate_stats_basic_sum_smoothed
mat compute_marker_aggregate_stats_basic_sum_smoothed(sp_mat& G, sp_mat& S, sp_mat& marker_mat, double alpha, int max_it, int perm_no, int thread_no);
static SEXP _ACTIONet_compute_marker_aggregate_stats_basic_sum_smoothed_try(SEXP GSEXP, SEXP SSEXP, SEXP marker_matSEXP, SEXP alphaSEXP, SEXP max_itSEXP, SEXP perm_noSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< sp_mat& >::type marker_mat(marker_matSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< int >::type perm_no(perm_noSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_marker_aggregate_stats_basic_sum_smoothed(G, S, marker_mat, alpha, max_it, perm_no, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_marker_aggregate_stats_basic_sum_smoothed(SEXP GSEXP, SEXP SSEXP, SEXP marker_matSEXP, SEXP alphaSEXP, SEXP max_itSEXP, SEXP perm_noSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_marker_aggregate_stats_basic_sum_smoothed_try(GSEXP, SSEXP, marker_matSEXP, alphaSEXP, max_itSEXP, perm_noSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_marker_aggregate_stats_basic_sum_smoothed_normalized
mat compute_marker_aggregate_stats_basic_sum_smoothed_normalized(sp_mat& G, sp_mat& S, sp_mat& marker_mat, double alpha, int max_it, int perm_no, int thread_no);
static SEXP _ACTIONet_compute_marker_aggregate_stats_basic_sum_smoothed_normalized_try(SEXP GSEXP, SEXP SSEXP, SEXP marker_matSEXP, SEXP alphaSEXP, SEXP max_itSEXP, SEXP perm_noSEXP, SEXP thread_noSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< sp_mat& >::type marker_mat(marker_matSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< int >::type perm_no(perm_noSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_marker_aggregate_stats_basic_sum_smoothed_normalized(G, S, marker_mat, alpha, max_it, perm_no, thread_no));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_marker_aggregate_stats_basic_sum_smoothed_normalized(SEXP GSEXP, SEXP SSEXP, SEXP marker_matSEXP, SEXP alphaSEXP, SEXP max_itSEXP, SEXP perm_noSEXP, SEXP thread_noSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_marker_aggregate_stats_basic_sum_smoothed_normalized_try(GSEXP, SSEXP, marker_matSEXP, alphaSEXP, max_itSEXP, perm_noSEXP, thread_noSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// LSI
sp_mat LSI(sp_mat& X, double size_factor);
static SEXP _ACTIONet_LSI_try(SEXP XSEXP, SEXP size_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type size_factor(size_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(LSI(X, size_factor));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_LSI(SEXP XSEXP, SEXP size_factorSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_LSI_try(XSEXP, size_factorSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_marker_aggregate_stats_TFIDF_sum_smoothed
mat compute_marker_aggregate_stats_TFIDF_sum_smoothed(sp_mat& G, sp_mat& S, sp_mat& marker_mat, double alpha, int max_it, int perm_no, int thread_no, int normalization);
static SEXP _ACTIONet_compute_marker_aggregate_stats_TFIDF_sum_smoothed_try(SEXP GSEXP, SEXP SSEXP, SEXP marker_matSEXP, SEXP alphaSEXP, SEXP max_itSEXP, SEXP perm_noSEXP, SEXP thread_noSEXP, SEXP normalizationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type G(GSEXP);
    Rcpp::traits::input_parameter< sp_mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< sp_mat& >::type marker_mat(marker_matSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type max_it(max_itSEXP);
    Rcpp::traits::input_parameter< int >::type perm_no(perm_noSEXP);
    Rcpp::traits::input_parameter< int >::type thread_no(thread_noSEXP);
    Rcpp::traits::input_parameter< int >::type normalization(normalizationSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_marker_aggregate_stats_TFIDF_sum_smoothed(G, S, marker_mat, alpha, max_it, perm_no, thread_no, normalization));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ACTIONet_compute_marker_aggregate_stats_TFIDF_sum_smoothed(SEXP GSEXP, SEXP SSEXP, SEXP marker_matSEXP, SEXP alphaSEXP, SEXP max_itSEXP, SEXP perm_noSEXP, SEXP thread_noSEXP, SEXP normalizationSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ACTIONet_compute_marker_aggregate_stats_TFIDF_sum_smoothed_try(GSEXP, SSEXP, marker_matSEXP, alphaSEXP, max_itSEXP, perm_noSEXP, thread_noSEXP, normalizationSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// roll_var
vec roll_var(vec& X);
RcppExport SEXP _ACTIONet_roll_var(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_var(X));
    return rcpp_result_gen;
END_RCPP
}
// fast_row_sums
Rcpp::NumericVector fast_row_sums(SEXP& A);
RcppExport SEXP _ACTIONet_fast_row_sums(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(fast_row_sums(A));
    return rcpp_result_gen;
END_RCPP
}
// fast_column_sums
Rcpp::NumericVector fast_column_sums(SEXP& A);
RcppExport SEXP _ACTIONet_fast_column_sums(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(fast_column_sums(A));
    return rcpp_result_gen;
END_RCPP
}
// fast_row_max
Rcpp::NumericVector fast_row_max(SEXP& A);
RcppExport SEXP _ACTIONet_fast_row_max(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(fast_row_max(A));
    return rcpp_result_gen;
END_RCPP
}
// computeSparseRowVariances
Rcpp::NumericVector computeSparseRowVariances(IntegerVector j, NumericVector val, NumericVector rm, int n);
RcppExport SEXP _ACTIONet_computeSparseRowVariances(SEXP jSEXP, SEXP valSEXP, SEXP rmSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type j(jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type val(valSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rm(rmSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(computeSparseRowVariances(j, val, rm, n));
    return rcpp_result_gen;
END_RCPP
}
// bind_sparse_mats
sp_mat bind_sparse_mats(sp_mat& A, sp_mat& B, int dim);
RcppExport SEXP _ACTIONet_bind_sparse_mats(SEXP ASEXP, SEXP BSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< sp_mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< sp_mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(bind_sparse_mats(A, B, dim));
    return rcpp_result_gen;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int _ACTIONet_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("void(*set_seed)(double)");
        signatures.insert("List(*IRLB_SVD)(sp_mat&,int,int,int,int)");
        signatures.insert("List(*IRLB_SVD_full)(mat&,int,int,int,int)");
        signatures.insert("List(*FengSVD)(sp_mat&,int,int,int,int)");
        signatures.insert("List(*FengSVD_full)(mat&,int,int,int,int)");
        signatures.insert("List(*HalkoSVD)(sp_mat&,int,int,int,int)");
        signatures.insert("List(*HalkoSVD_full)(mat&,int,int,int,int)");
        signatures.insert("List(*reduce_kernel)(sp_mat&,int,int,int,int,bool,int)");
        signatures.insert("List(*reduce_kernel_full)(mat&,int,int,int,int,bool,int)");
        signatures.insert("mat(*run_simplex_regression)(mat&,mat&,bool)");
        signatures.insert("List(*run_SPA)(mat&,int)");
        signatures.insert("List(*run_SPA_rows_sparse)(sp_mat&,int)");
        signatures.insert("List(*run_ACTION)(mat&,int,int,int,int,double)");
        signatures.insert("List(*run_ACTION_plus)(mat&,int,int,int,double,int)");
        signatures.insert("List(*run_AA)(mat&,mat&,int,double)");
        signatures.insert("List(*run_online_ACTION)(mat&,field<uvec>,int,int,int)");
        signatures.insert("List(*run_weighted_ACTION)(mat&,vec,int,int,int,int,double)");
        signatures.insert("List(*prune_archetypes)(const List&,const List&,double,int)");
        signatures.insert("List(*unify_archetypes)(mat&,mat&,mat&,double,int)");
        signatures.insert("sp_mat(*build_ACTIONet)(mat,double,int,bool,string,string,int)");
        signatures.insert("sp_mat(*build_knn)(mat,double,int,bool,string)");
        signatures.insert("List(*layout_ACTIONet)(sp_mat&,mat,int,unsigned int,int,int,int)");
        signatures.insert("vector<string>(*encode_ids)(vector<string>,string)");
        signatures.insert("vector<string>(*decode_ids)(vector<string>,string)");
        signatures.insert("mat(*compute_pseudo_bulk_per_cluster)(sp_mat&,arma::Col<unsigned long long>)");
        signatures.insert("mat(*compute_pseudo_bulk_per_cluster_full)(mat&,arma::Col<unsigned long long>)");
        signatures.insert("field<mat>(*compute_pseudo_bulk_per_cluster_and_ind)(sp_mat&,arma::Col<unsigned long long>,arma::Col<unsigned long long>)");
        signatures.insert("field<mat>(*compute_pseudo_bulk_per_cluster_and_ind_full)(mat&,arma::Col<unsigned long long>,arma::Col<unsigned long long>)");
        signatures.insert("mat(*compute_pseudo_bulk_per_archetype)(sp_mat&,mat&)");
        signatures.insert("mat(*compute_pseudo_bulk_per_archetype_full)(mat&,mat&)");
        signatures.insert("field<mat>(*compute_pseudo_bulk_per_archetype_and_ind)(sp_mat&,mat&,arma::Col<unsigned long long>)");
        signatures.insert("field<mat>(*compute_pseudo_bulk_per_archetype_and_ind_full)(mat&,mat&,arma::Col<unsigned long long>)");
        signatures.insert("sp_mat(*renormalize_input_matrix)(sp_mat&,arma::Col<unsigned long long>)");
        signatures.insert("mat(*renormalize_input_matrix_full)(mat&,arma::Col<unsigned long long>)");
        signatures.insert("List(*compute_archetype_feature_specificity_bin)(sp_mat&,mat&)");
        signatures.insert("List(*compute_archetype_feature_specificity)(sp_mat&,mat&)");
        signatures.insert("List(*compute_archetype_feature_specificity_full)(mat&,mat&)");
        signatures.insert("List(*compute_cluster_feature_specificity)(sp_mat&,uvec)");
        signatures.insert("List(*compute_cluster_feature_specificity_full)(mat&,uvec)");
        signatures.insert("uvec(*compute_core_number)(sp_mat&)");
        signatures.insert("vec(*compute_archetype_core_centrality)(sp_mat&,uvec)");
        signatures.insert("mat(*compute_network_diffusion)(sp_mat&,sp_mat&,int,double,int)");
        signatures.insert("mat(*compute_network_diffusion_fast)(sp_mat&,sp_mat&,int,double,int)");
        signatures.insert("mat(*compute_network_diffusion_direct)(sp_mat&,sp_mat&,int,double)");
        signatures.insert("sp_mat(*compute_sparse_network_diffusion)(sp_mat&,sp_mat&,double,double,double,int)");
        signatures.insert("List(*assess_enrichment)(mat&,sp_mat&,int)");
        signatures.insert("vec(*NetDBSCAN)(SEXP,int,double,double)");
        signatures.insert("List(*run_HDBSCAN)(mat&,int,int)");
        signatures.insert("mat(*MWM_hungarian)(mat&)");
        signatures.insert("vec(*signed_cluster)(sp_mat,double,Nullable<IntegerVector>,int)");
        signatures.insert("mat(*unsigned_cluster_batch)(sp_mat,vec,Nullable<IntegerVector>,int)");
        signatures.insert("vec(*unsigned_cluster)(sp_mat,double,Nullable<IntegerVector>,int)");
        signatures.insert("mat(*Prune_PageRank)(mat&,double)");
        signatures.insert("List(*transform_layout)(sp_mat&,mat,mat,mat,int,unsigned int,int,int)");
        signatures.insert("mat(*sgd2_layout_weighted)(sp_mat&,mat,int,double,int)");
        signatures.insert("mat(*sgd2_layout_weighted_convergent)(sp_mat&,mat,int,double,double,int,int)");
        signatures.insert("mat(*sgd2_layout_sparse_weighted)(sp_mat&,mat,int,int,double,int)");
        signatures.insert("List(*compute_AA_coreset)(sp_mat&,int)");
        signatures.insert("List(*SVD2ACTIONred)(sp_mat&,mat,vec,mat)");
        signatures.insert("List(*SVD2ACTIONred_full)(mat&,mat,vec,mat)");
        signatures.insert("List(*PCA2ACTIONred)(sp_mat&,mat,vec,mat)");
        signatures.insert("List(*PCA2ACTIONred_full)(mat&,mat,vec,mat)");
        signatures.insert("List(*PCA2SVD)(sp_mat&,mat,vec,mat)");
        signatures.insert("List(*PCA2SVD_full)(mat&,mat,vec,mat)");
        signatures.insert("List(*SVD2PCA)(sp_mat&,mat,vec,mat)");
        signatures.insert("List(*SVD2PCA_full)(mat&,mat,vec,mat)");
        signatures.insert("List(*perturbedSVD)(mat,vec,mat,mat,mat)");
        signatures.insert("mat(*computeFullSim)(mat&,int)");
        signatures.insert("void(*csr_sort_indices_inplace)(IntegerVector&,IntegerVector&,NumericVector&)");
        signatures.insert("void(*csc_sort_indices_inplace)(IntegerVector&,IntegerVector&,NumericVector&)");
        signatures.insert("List(*run_subACTION)(mat&,mat&,mat&,int,int,int,int,int,double)");
        signatures.insert("List(*deflate_reduction)(mat&,mat&,mat&,mat&,vec&,mat&,mat&)");
        signatures.insert("List(*orthogonalize_batch_effect)(sp_mat&,mat&,mat&,mat&,mat&,vec&,mat&)");
        signatures.insert("List(*orthogonalize_batch_effect_full)(mat&,mat&,mat&,mat&,mat&,vec&,mat&)");
        signatures.insert("List(*orthogonalize_basal)(sp_mat&,mat&,mat&,mat&,mat&,vec&,mat&)");
        signatures.insert("List(*orthogonalize_basal_full)(mat&,mat&,mat&,mat&,mat&,vec&,mat&)");
        signatures.insert("umat(*MWM_rank1)(vec,vec,double,double)");
        signatures.insert("mat(*NetEnh)(mat)");
        signatures.insert("vec(*run_LPA)(sp_mat&,vec,double,int,double,Nullable<IntegerVector>)");
        signatures.insert("mat(*compute_marker_aggregate_stats)(sp_mat&,sp_mat&,sp_mat&,double,int,int,bool)");
        signatures.insert("List(*run_AA_with_batch_correction)(mat&,mat&,vec,int,int,double,double)");
        signatures.insert("List(*run_ACTION_with_batch_correction)(mat&,vec,int,int,int,int,int,double,double)");
        signatures.insert("mat(*compute_marker_aggregate_stats_basic_sum)(sp_mat&,sp_mat&)");
        signatures.insert("mat(*compute_marker_aggregate_stats_basic_sum_perm)(sp_mat&,sp_mat&,int,int)");
        signatures.insert("mat(*compute_marker_aggregate_stats_basic_sum_perm_smoothed)(sp_mat&,sp_mat&,sp_mat&,double,int,int,int)");
        signatures.insert("mat(*compute_marker_aggregate_stats_basic_sum_perm_smoothed_v2)(sp_mat&,sp_mat&,sp_mat&,double,int,int,int)");
        signatures.insert("mat(*compute_marker_aggregate_stats_basic_sum_smoothed)(sp_mat&,sp_mat&,sp_mat&,double,int,int,int)");
        signatures.insert("mat(*compute_marker_aggregate_stats_basic_sum_smoothed_normalized)(sp_mat&,sp_mat&,sp_mat&,double,int,int,int)");
        signatures.insert("sp_mat(*LSI)(sp_mat&,double)");
        signatures.insert("mat(*compute_marker_aggregate_stats_TFIDF_sum_smoothed)(sp_mat&,sp_mat&,sp_mat&,double,int,int,int,int)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _ACTIONet_RcppExport_registerCCallable() { 
    R_RegisterCCallable("ACTIONet", "_ACTIONet_set_seed", (DL_FUNC)_ACTIONet_set_seed_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_IRLB_SVD", (DL_FUNC)_ACTIONet_IRLB_SVD_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_IRLB_SVD_full", (DL_FUNC)_ACTIONet_IRLB_SVD_full_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_FengSVD", (DL_FUNC)_ACTIONet_FengSVD_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_FengSVD_full", (DL_FUNC)_ACTIONet_FengSVD_full_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_HalkoSVD", (DL_FUNC)_ACTIONet_HalkoSVD_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_HalkoSVD_full", (DL_FUNC)_ACTIONet_HalkoSVD_full_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_reduce_kernel", (DL_FUNC)_ACTIONet_reduce_kernel_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_reduce_kernel_full", (DL_FUNC)_ACTIONet_reduce_kernel_full_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_run_simplex_regression", (DL_FUNC)_ACTIONet_run_simplex_regression_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_run_SPA", (DL_FUNC)_ACTIONet_run_SPA_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_run_SPA_rows_sparse", (DL_FUNC)_ACTIONet_run_SPA_rows_sparse_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_run_ACTION", (DL_FUNC)_ACTIONet_run_ACTION_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_run_ACTION_plus", (DL_FUNC)_ACTIONet_run_ACTION_plus_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_run_AA", (DL_FUNC)_ACTIONet_run_AA_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_run_online_ACTION", (DL_FUNC)_ACTIONet_run_online_ACTION_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_run_weighted_ACTION", (DL_FUNC)_ACTIONet_run_weighted_ACTION_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_prune_archetypes", (DL_FUNC)_ACTIONet_prune_archetypes_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_unify_archetypes", (DL_FUNC)_ACTIONet_unify_archetypes_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_build_ACTIONet", (DL_FUNC)_ACTIONet_build_ACTIONet_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_build_knn", (DL_FUNC)_ACTIONet_build_knn_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_layout_ACTIONet", (DL_FUNC)_ACTIONet_layout_ACTIONet_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_encode_ids", (DL_FUNC)_ACTIONet_encode_ids_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_decode_ids", (DL_FUNC)_ACTIONet_decode_ids_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_pseudo_bulk_per_cluster", (DL_FUNC)_ACTIONet_compute_pseudo_bulk_per_cluster_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_pseudo_bulk_per_cluster_full", (DL_FUNC)_ACTIONet_compute_pseudo_bulk_per_cluster_full_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_pseudo_bulk_per_cluster_and_ind", (DL_FUNC)_ACTIONet_compute_pseudo_bulk_per_cluster_and_ind_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_pseudo_bulk_per_cluster_and_ind_full", (DL_FUNC)_ACTIONet_compute_pseudo_bulk_per_cluster_and_ind_full_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_pseudo_bulk_per_archetype", (DL_FUNC)_ACTIONet_compute_pseudo_bulk_per_archetype_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_pseudo_bulk_per_archetype_full", (DL_FUNC)_ACTIONet_compute_pseudo_bulk_per_archetype_full_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_pseudo_bulk_per_archetype_and_ind", (DL_FUNC)_ACTIONet_compute_pseudo_bulk_per_archetype_and_ind_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_pseudo_bulk_per_archetype_and_ind_full", (DL_FUNC)_ACTIONet_compute_pseudo_bulk_per_archetype_and_ind_full_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_renormalize_input_matrix", (DL_FUNC)_ACTIONet_renormalize_input_matrix_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_renormalize_input_matrix_full", (DL_FUNC)_ACTIONet_renormalize_input_matrix_full_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_archetype_feature_specificity_bin", (DL_FUNC)_ACTIONet_compute_archetype_feature_specificity_bin_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_archetype_feature_specificity", (DL_FUNC)_ACTIONet_compute_archetype_feature_specificity_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_archetype_feature_specificity_full", (DL_FUNC)_ACTIONet_compute_archetype_feature_specificity_full_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_cluster_feature_specificity", (DL_FUNC)_ACTIONet_compute_cluster_feature_specificity_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_cluster_feature_specificity_full", (DL_FUNC)_ACTIONet_compute_cluster_feature_specificity_full_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_core_number", (DL_FUNC)_ACTIONet_compute_core_number_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_archetype_core_centrality", (DL_FUNC)_ACTIONet_compute_archetype_core_centrality_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_network_diffusion", (DL_FUNC)_ACTIONet_compute_network_diffusion_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_network_diffusion_fast", (DL_FUNC)_ACTIONet_compute_network_diffusion_fast_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_network_diffusion_direct", (DL_FUNC)_ACTIONet_compute_network_diffusion_direct_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_sparse_network_diffusion", (DL_FUNC)_ACTIONet_compute_sparse_network_diffusion_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_assess_enrichment", (DL_FUNC)_ACTIONet_assess_enrichment_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_NetDBSCAN", (DL_FUNC)_ACTIONet_NetDBSCAN_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_run_HDBSCAN", (DL_FUNC)_ACTIONet_run_HDBSCAN_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_MWM_hungarian", (DL_FUNC)_ACTIONet_MWM_hungarian_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_signed_cluster", (DL_FUNC)_ACTIONet_signed_cluster_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_unsigned_cluster_batch", (DL_FUNC)_ACTIONet_unsigned_cluster_batch_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_unsigned_cluster", (DL_FUNC)_ACTIONet_unsigned_cluster_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_Prune_PageRank", (DL_FUNC)_ACTIONet_Prune_PageRank_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_transform_layout", (DL_FUNC)_ACTIONet_transform_layout_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_sgd2_layout_weighted", (DL_FUNC)_ACTIONet_sgd2_layout_weighted_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_sgd2_layout_weighted_convergent", (DL_FUNC)_ACTIONet_sgd2_layout_weighted_convergent_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_sgd2_layout_sparse_weighted", (DL_FUNC)_ACTIONet_sgd2_layout_sparse_weighted_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_AA_coreset", (DL_FUNC)_ACTIONet_compute_AA_coreset_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_SVD2ACTIONred", (DL_FUNC)_ACTIONet_SVD2ACTIONred_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_SVD2ACTIONred_full", (DL_FUNC)_ACTIONet_SVD2ACTIONred_full_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_PCA2ACTIONred", (DL_FUNC)_ACTIONet_PCA2ACTIONred_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_PCA2ACTIONred_full", (DL_FUNC)_ACTIONet_PCA2ACTIONred_full_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_PCA2SVD", (DL_FUNC)_ACTIONet_PCA2SVD_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_PCA2SVD_full", (DL_FUNC)_ACTIONet_PCA2SVD_full_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_SVD2PCA", (DL_FUNC)_ACTIONet_SVD2PCA_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_SVD2PCA_full", (DL_FUNC)_ACTIONet_SVD2PCA_full_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_perturbedSVD", (DL_FUNC)_ACTIONet_perturbedSVD_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_computeFullSim", (DL_FUNC)_ACTIONet_computeFullSim_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_csr_sort_indices_inplace", (DL_FUNC)_ACTIONet_csr_sort_indices_inplace_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_csc_sort_indices_inplace", (DL_FUNC)_ACTIONet_csc_sort_indices_inplace_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_run_subACTION", (DL_FUNC)_ACTIONet_run_subACTION_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_deflate_reduction", (DL_FUNC)_ACTIONet_deflate_reduction_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_orthogonalize_batch_effect", (DL_FUNC)_ACTIONet_orthogonalize_batch_effect_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_orthogonalize_batch_effect_full", (DL_FUNC)_ACTIONet_orthogonalize_batch_effect_full_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_orthogonalize_basal", (DL_FUNC)_ACTIONet_orthogonalize_basal_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_orthogonalize_basal_full", (DL_FUNC)_ACTIONet_orthogonalize_basal_full_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_MWM_rank1", (DL_FUNC)_ACTIONet_MWM_rank1_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_NetEnh", (DL_FUNC)_ACTIONet_NetEnh_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_run_LPA", (DL_FUNC)_ACTIONet_run_LPA_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_marker_aggregate_stats", (DL_FUNC)_ACTIONet_compute_marker_aggregate_stats_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_run_AA_with_batch_correction", (DL_FUNC)_ACTIONet_run_AA_with_batch_correction_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_run_ACTION_with_batch_correction", (DL_FUNC)_ACTIONet_run_ACTION_with_batch_correction_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_marker_aggregate_stats_basic_sum", (DL_FUNC)_ACTIONet_compute_marker_aggregate_stats_basic_sum_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_marker_aggregate_stats_basic_sum_perm", (DL_FUNC)_ACTIONet_compute_marker_aggregate_stats_basic_sum_perm_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_marker_aggregate_stats_basic_sum_perm_smoothed", (DL_FUNC)_ACTIONet_compute_marker_aggregate_stats_basic_sum_perm_smoothed_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_marker_aggregate_stats_basic_sum_perm_smoothed_v2", (DL_FUNC)_ACTIONet_compute_marker_aggregate_stats_basic_sum_perm_smoothed_v2_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_marker_aggregate_stats_basic_sum_smoothed", (DL_FUNC)_ACTIONet_compute_marker_aggregate_stats_basic_sum_smoothed_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_marker_aggregate_stats_basic_sum_smoothed_normalized", (DL_FUNC)_ACTIONet_compute_marker_aggregate_stats_basic_sum_smoothed_normalized_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_LSI", (DL_FUNC)_ACTIONet_LSI_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_compute_marker_aggregate_stats_TFIDF_sum_smoothed", (DL_FUNC)_ACTIONet_compute_marker_aggregate_stats_TFIDF_sum_smoothed_try);
    R_RegisterCCallable("ACTIONet", "_ACTIONet_RcppExport_validate", (DL_FUNC)_ACTIONet_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_ACTIONet_set_seed", (DL_FUNC) &_ACTIONet_set_seed, 1},
    {"_ACTIONet_IRLB_SVD", (DL_FUNC) &_ACTIONet_IRLB_SVD, 5},
    {"_ACTIONet_IRLB_SVD_full", (DL_FUNC) &_ACTIONet_IRLB_SVD_full, 5},
    {"_ACTIONet_FengSVD", (DL_FUNC) &_ACTIONet_FengSVD, 5},
    {"_ACTIONet_FengSVD_full", (DL_FUNC) &_ACTIONet_FengSVD_full, 5},
    {"_ACTIONet_HalkoSVD", (DL_FUNC) &_ACTIONet_HalkoSVD, 5},
    {"_ACTIONet_HalkoSVD_full", (DL_FUNC) &_ACTIONet_HalkoSVD_full, 5},
    {"_ACTIONet_reduce_kernel", (DL_FUNC) &_ACTIONet_reduce_kernel, 7},
    {"_ACTIONet_reduce_kernel_full", (DL_FUNC) &_ACTIONet_reduce_kernel_full, 7},
    {"_ACTIONet_run_simplex_regression", (DL_FUNC) &_ACTIONet_run_simplex_regression, 3},
    {"_ACTIONet_run_SPA", (DL_FUNC) &_ACTIONet_run_SPA, 2},
    {"_ACTIONet_run_SPA_rows_sparse", (DL_FUNC) &_ACTIONet_run_SPA_rows_sparse, 2},
    {"_ACTIONet_run_ACTION", (DL_FUNC) &_ACTIONet_run_ACTION, 6},
    {"_ACTIONet_run_ACTION_plus", (DL_FUNC) &_ACTIONet_run_ACTION_plus, 6},
    {"_ACTIONet_run_AA", (DL_FUNC) &_ACTIONet_run_AA, 4},
    {"_ACTIONet_run_online_ACTION", (DL_FUNC) &_ACTIONet_run_online_ACTION, 5},
    {"_ACTIONet_run_weighted_ACTION", (DL_FUNC) &_ACTIONet_run_weighted_ACTION, 7},
    {"_ACTIONet_prune_archetypes", (DL_FUNC) &_ACTIONet_prune_archetypes, 4},
    {"_ACTIONet_unify_archetypes", (DL_FUNC) &_ACTIONet_unify_archetypes, 5},
    {"_ACTIONet_build_ACTIONet", (DL_FUNC) &_ACTIONet_build_ACTIONet, 7},
    {"_ACTIONet_build_knn", (DL_FUNC) &_ACTIONet_build_knn, 5},
    {"_ACTIONet_layout_ACTIONet", (DL_FUNC) &_ACTIONet_layout_ACTIONet, 7},
    {"_ACTIONet_encode_ids", (DL_FUNC) &_ACTIONet_encode_ids, 2},
    {"_ACTIONet_decode_ids", (DL_FUNC) &_ACTIONet_decode_ids, 2},
    {"_ACTIONet_compute_pseudo_bulk_per_cluster", (DL_FUNC) &_ACTIONet_compute_pseudo_bulk_per_cluster, 2},
    {"_ACTIONet_compute_pseudo_bulk_per_cluster_full", (DL_FUNC) &_ACTIONet_compute_pseudo_bulk_per_cluster_full, 2},
    {"_ACTIONet_compute_pseudo_bulk_per_cluster_and_ind", (DL_FUNC) &_ACTIONet_compute_pseudo_bulk_per_cluster_and_ind, 3},
    {"_ACTIONet_compute_pseudo_bulk_per_cluster_and_ind_full", (DL_FUNC) &_ACTIONet_compute_pseudo_bulk_per_cluster_and_ind_full, 3},
    {"_ACTIONet_compute_pseudo_bulk_per_archetype", (DL_FUNC) &_ACTIONet_compute_pseudo_bulk_per_archetype, 2},
    {"_ACTIONet_compute_pseudo_bulk_per_archetype_full", (DL_FUNC) &_ACTIONet_compute_pseudo_bulk_per_archetype_full, 2},
    {"_ACTIONet_compute_pseudo_bulk_per_archetype_and_ind", (DL_FUNC) &_ACTIONet_compute_pseudo_bulk_per_archetype_and_ind, 3},
    {"_ACTIONet_compute_pseudo_bulk_per_archetype_and_ind_full", (DL_FUNC) &_ACTIONet_compute_pseudo_bulk_per_archetype_and_ind_full, 3},
    {"_ACTIONet_renormalize_input_matrix", (DL_FUNC) &_ACTIONet_renormalize_input_matrix, 2},
    {"_ACTIONet_renormalize_input_matrix_full", (DL_FUNC) &_ACTIONet_renormalize_input_matrix_full, 2},
    {"_ACTIONet_compute_archetype_feature_specificity_bin", (DL_FUNC) &_ACTIONet_compute_archetype_feature_specificity_bin, 2},
    {"_ACTIONet_compute_archetype_feature_specificity", (DL_FUNC) &_ACTIONet_compute_archetype_feature_specificity, 2},
    {"_ACTIONet_compute_archetype_feature_specificity_full", (DL_FUNC) &_ACTIONet_compute_archetype_feature_specificity_full, 2},
    {"_ACTIONet_compute_cluster_feature_specificity", (DL_FUNC) &_ACTIONet_compute_cluster_feature_specificity, 2},
    {"_ACTIONet_compute_cluster_feature_specificity_full", (DL_FUNC) &_ACTIONet_compute_cluster_feature_specificity_full, 2},
    {"_ACTIONet_compute_core_number", (DL_FUNC) &_ACTIONet_compute_core_number, 1},
    {"_ACTIONet_compute_archetype_core_centrality", (DL_FUNC) &_ACTIONet_compute_archetype_core_centrality, 2},
    {"_ACTIONet_compute_network_diffusion", (DL_FUNC) &_ACTIONet_compute_network_diffusion, 5},
    {"_ACTIONet_compute_network_diffusion_fast", (DL_FUNC) &_ACTIONet_compute_network_diffusion_fast, 5},
    {"_ACTIONet_compute_network_diffusion_direct", (DL_FUNC) &_ACTIONet_compute_network_diffusion_direct, 4},
    {"_ACTIONet_compute_sparse_network_diffusion", (DL_FUNC) &_ACTIONet_compute_sparse_network_diffusion, 6},
    {"_ACTIONet_assess_enrichment", (DL_FUNC) &_ACTIONet_assess_enrichment, 3},
    {"_ACTIONet_NetDBSCAN", (DL_FUNC) &_ACTIONet_NetDBSCAN, 4},
    {"_ACTIONet_run_HDBSCAN", (DL_FUNC) &_ACTIONet_run_HDBSCAN, 3},
    {"_ACTIONet_MWM_hungarian", (DL_FUNC) &_ACTIONet_MWM_hungarian, 1},
    {"_ACTIONet_signed_cluster", (DL_FUNC) &_ACTIONet_signed_cluster, 4},
    {"_ACTIONet_unsigned_cluster_batch", (DL_FUNC) &_ACTIONet_unsigned_cluster_batch, 4},
    {"_ACTIONet_unsigned_cluster", (DL_FUNC) &_ACTIONet_unsigned_cluster, 4},
    {"_ACTIONet_Prune_PageRank", (DL_FUNC) &_ACTIONet_Prune_PageRank, 2},
    {"_ACTIONet_transform_layout", (DL_FUNC) &_ACTIONet_transform_layout, 8},
    {"_ACTIONet_sgd2_layout_weighted", (DL_FUNC) &_ACTIONet_sgd2_layout_weighted, 5},
    {"_ACTIONet_sgd2_layout_weighted_convergent", (DL_FUNC) &_ACTIONet_sgd2_layout_weighted_convergent, 7},
    {"_ACTIONet_sgd2_layout_sparse_weighted", (DL_FUNC) &_ACTIONet_sgd2_layout_sparse_weighted, 6},
    {"_ACTIONet_compute_AA_coreset", (DL_FUNC) &_ACTIONet_compute_AA_coreset, 2},
    {"_ACTIONet_SVD2ACTIONred", (DL_FUNC) &_ACTIONet_SVD2ACTIONred, 4},
    {"_ACTIONet_SVD2ACTIONred_full", (DL_FUNC) &_ACTIONet_SVD2ACTIONred_full, 4},
    {"_ACTIONet_PCA2ACTIONred", (DL_FUNC) &_ACTIONet_PCA2ACTIONred, 4},
    {"_ACTIONet_PCA2ACTIONred_full", (DL_FUNC) &_ACTIONet_PCA2ACTIONred_full, 4},
    {"_ACTIONet_PCA2SVD", (DL_FUNC) &_ACTIONet_PCA2SVD, 4},
    {"_ACTIONet_PCA2SVD_full", (DL_FUNC) &_ACTIONet_PCA2SVD_full, 4},
    {"_ACTIONet_SVD2PCA", (DL_FUNC) &_ACTIONet_SVD2PCA, 4},
    {"_ACTIONet_SVD2PCA_full", (DL_FUNC) &_ACTIONet_SVD2PCA_full, 4},
    {"_ACTIONet_perturbedSVD", (DL_FUNC) &_ACTIONet_perturbedSVD, 5},
    {"_ACTIONet_computeFullSim", (DL_FUNC) &_ACTIONet_computeFullSim, 2},
    {"_ACTIONet_csr_sort_indices_inplace", (DL_FUNC) &_ACTIONet_csr_sort_indices_inplace, 3},
    {"_ACTIONet_csc_sort_indices_inplace", (DL_FUNC) &_ACTIONet_csc_sort_indices_inplace, 3},
    {"_ACTIONet_run_subACTION", (DL_FUNC) &_ACTIONet_run_subACTION, 9},
    {"_ACTIONet_deflate_reduction", (DL_FUNC) &_ACTIONet_deflate_reduction, 7},
    {"_ACTIONet_orthogonalize_batch_effect", (DL_FUNC) &_ACTIONet_orthogonalize_batch_effect, 7},
    {"_ACTIONet_orthogonalize_batch_effect_full", (DL_FUNC) &_ACTIONet_orthogonalize_batch_effect_full, 7},
    {"_ACTIONet_orthogonalize_basal", (DL_FUNC) &_ACTIONet_orthogonalize_basal, 7},
    {"_ACTIONet_orthogonalize_basal_full", (DL_FUNC) &_ACTIONet_orthogonalize_basal_full, 7},
    {"_ACTIONet_MWM_rank1", (DL_FUNC) &_ACTIONet_MWM_rank1, 4},
    {"_ACTIONet_NetEnh", (DL_FUNC) &_ACTIONet_NetEnh, 1},
    {"_ACTIONet_run_LPA", (DL_FUNC) &_ACTIONet_run_LPA, 6},
    {"_ACTIONet_compute_marker_aggregate_stats", (DL_FUNC) &_ACTIONet_compute_marker_aggregate_stats, 7},
    {"_ACTIONet_run_AA_with_batch_correction", (DL_FUNC) &_ACTIONet_run_AA_with_batch_correction, 7},
    {"_ACTIONet_run_ACTION_with_batch_correction", (DL_FUNC) &_ACTIONet_run_ACTION_with_batch_correction, 9},
    {"_ACTIONet_compute_marker_aggregate_stats_basic_sum", (DL_FUNC) &_ACTIONet_compute_marker_aggregate_stats_basic_sum, 2},
    {"_ACTIONet_compute_marker_aggregate_stats_basic_sum_perm", (DL_FUNC) &_ACTIONet_compute_marker_aggregate_stats_basic_sum_perm, 4},
    {"_ACTIONet_compute_marker_aggregate_stats_basic_sum_perm_smoothed", (DL_FUNC) &_ACTIONet_compute_marker_aggregate_stats_basic_sum_perm_smoothed, 7},
    {"_ACTIONet_compute_marker_aggregate_stats_basic_sum_perm_smoothed_v2", (DL_FUNC) &_ACTIONet_compute_marker_aggregate_stats_basic_sum_perm_smoothed_v2, 7},
    {"_ACTIONet_compute_marker_aggregate_stats_basic_sum_smoothed", (DL_FUNC) &_ACTIONet_compute_marker_aggregate_stats_basic_sum_smoothed, 7},
    {"_ACTIONet_compute_marker_aggregate_stats_basic_sum_smoothed_normalized", (DL_FUNC) &_ACTIONet_compute_marker_aggregate_stats_basic_sum_smoothed_normalized, 7},
    {"_ACTIONet_LSI", (DL_FUNC) &_ACTIONet_LSI, 2},
    {"_ACTIONet_compute_marker_aggregate_stats_TFIDF_sum_smoothed", (DL_FUNC) &_ACTIONet_compute_marker_aggregate_stats_TFIDF_sum_smoothed, 8},
    {"_ACTIONet_roll_var", (DL_FUNC) &_ACTIONet_roll_var, 1},
    {"_ACTIONet_fast_row_sums", (DL_FUNC) &_ACTIONet_fast_row_sums, 1},
    {"_ACTIONet_fast_column_sums", (DL_FUNC) &_ACTIONet_fast_column_sums, 1},
    {"_ACTIONet_fast_row_max", (DL_FUNC) &_ACTIONet_fast_row_max, 1},
    {"_ACTIONet_computeSparseRowVariances", (DL_FUNC) &_ACTIONet_computeSparseRowVariances, 4},
    {"_ACTIONet_bind_sparse_mats", (DL_FUNC) &_ACTIONet_bind_sparse_mats, 3},
    {"_ACTIONet_RcppExport_registerCCallable", (DL_FUNC) &_ACTIONet_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_ACTIONet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
